
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000216c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  0000216c  000021e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000171c  00000000  00000000  0000232c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011ef  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00004c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00004db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00004f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00006f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  000080f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000090fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000929c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000955a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <main>
      7a:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e7       	ldi	r26, 0x7B	; 123
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e7       	ldi	r24, 0x7B	; 123
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	ed 57       	subi	r30, 0x7D	; 125
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <LCD_init>:




void LCD_init(void)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	6c 97       	sbiw	r28, 0x1c	; 28
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a0 ea       	ldi	r26, 0xA0	; 160
     caa:	b1 e4       	ldi	r27, 0x41	; 65
     cac:	89 8f       	std	Y+25, r24	; 0x19
     cae:	9a 8f       	std	Y+26, r25	; 0x1a
     cb0:	ab 8f       	std	Y+27, r26	; 0x1b
     cb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb4:	69 8d       	ldd	r22, Y+25	; 0x19
     cb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	4a ef       	ldi	r20, 0xFA	; 250
     cc2:	54 e4       	ldi	r21, 0x44	; 68
     cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	8d 8b       	std	Y+21, r24	; 0x15
     cce:	9e 8b       	std	Y+22, r25	; 0x16
     cd0:	af 8b       	std	Y+23, r26	; 0x17
     cd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cd4:	6d 89       	ldd	r22, Y+21	; 0x15
     cd6:	7e 89       	ldd	r23, Y+22	; 0x16
     cd8:	8f 89       	ldd	r24, Y+23	; 0x17
     cda:	98 8d       	ldd	r25, Y+24	; 0x18
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e8       	ldi	r20, 0x80	; 128
     ce2:	5f e3       	ldi	r21, 0x3F	; 63
     ce4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ce8:	88 23       	and	r24, r24
     cea:	2c f4       	brge	.+10     	; 0xcf6 <LCD_init+0x66>
		__ticks = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9c 8b       	std	Y+20, r25	; 0x14
     cf2:	8b 8b       	std	Y+19, r24	; 0x13
     cf4:	3f c0       	rjmp	.+126    	; 0xd74 <LCD_init+0xe4>
	else if (__tmp > 65535)
     cf6:	6d 89       	ldd	r22, Y+21	; 0x15
     cf8:	7e 89       	ldd	r23, Y+22	; 0x16
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	3f ef       	ldi	r19, 0xFF	; 255
     d02:	4f e7       	ldi	r20, 0x7F	; 127
     d04:	57 e4       	ldi	r21, 0x47	; 71
     d06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d0a:	18 16       	cp	r1, r24
     d0c:	4c f5       	brge	.+82     	; 0xd60 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0e:	69 8d       	ldd	r22, Y+25	; 0x19
     d10:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d12:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d14:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e2       	ldi	r20, 0x20	; 32
     d1c:	51 e4       	ldi	r21, 0x41	; 65
     d1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	bc 01       	movw	r22, r24
     d28:	cd 01       	movw	r24, r26
     d2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	9c 8b       	std	Y+20, r25	; 0x14
     d34:	8b 8b       	std	Y+19, r24	; 0x13
     d36:	0f c0       	rjmp	.+30     	; 0xd56 <LCD_init+0xc6>
     d38:	88 ec       	ldi	r24, 0xC8	; 200
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	9a 8b       	std	Y+18, r25	; 0x12
     d3e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d40:	89 89       	ldd	r24, Y+17	; 0x11
     d42:	9a 89       	ldd	r25, Y+18	; 0x12
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <LCD_init+0xb4>
     d48:	9a 8b       	std	Y+18, r25	; 0x12
     d4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	8b 89       	ldd	r24, Y+19	; 0x13
     d4e:	9c 89       	ldd	r25, Y+20	; 0x14
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	9c 8b       	std	Y+20, r25	; 0x14
     d54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	8b 89       	ldd	r24, Y+19	; 0x13
     d58:	9c 89       	ldd	r25, Y+20	; 0x14
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	69 f7       	brne	.-38     	; 0xd38 <LCD_init+0xa8>
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d60:	6d 89       	ldd	r22, Y+21	; 0x15
     d62:	7e 89       	ldd	r23, Y+22	; 0x16
     d64:	8f 89       	ldd	r24, Y+23	; 0x17
     d66:	98 8d       	ldd	r25, Y+24	; 0x18
     d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9c 8b       	std	Y+20, r25	; 0x14
     d72:	8b 8b       	std	Y+19, r24	; 0x13
     d74:	8b 89       	ldd	r24, Y+19	; 0x13
     d76:	9c 89       	ldd	r25, Y+20	; 0x14
     d78:	98 8b       	std	Y+16, r25	; 0x10
     d7a:	8f 87       	std	Y+15, r24	; 0x0f
     d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d7e:	98 89       	ldd	r25, Y+16	; 0x10
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <LCD_init+0xf0>
     d84:	98 8b       	std	Y+16, r25	; 0x10
     d86:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(20);
	GPIO_u8_WritePortDir(LCD_control_PORT,OUTPUT_PORT); // write  control port direction output
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	6f ef       	ldi	r22, 0xFF	; 255
     d8c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <GPIO_u8_WritePortDir>
	GPIO_u8_WritePortVal(LCD_control_PORT,0x00);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	0e 94 46 0b 	call	0x168c	; 0x168c <GPIO_u8_WritePortVal>
	GPIO_u8_WritePortDir(LCD_DATA_port,OUTPUT_PORT);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	6f ef       	ldi	r22, 0xFF	; 255
     d9c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <GPIO_u8_WritePortDir>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a0 e7       	ldi	r26, 0x70	; 112
     da6:	b1 e4       	ldi	r27, 0x41	; 65
     da8:	8b 87       	std	Y+11, r24	; 0x0b
     daa:	9c 87       	std	Y+12, r25	; 0x0c
     dac:	ad 87       	std	Y+13, r26	; 0x0d
     dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db0:	6b 85       	ldd	r22, Y+11	; 0x0b
     db2:	7c 85       	ldd	r23, Y+12	; 0x0c
     db4:	8d 85       	ldd	r24, Y+13	; 0x0d
     db6:	9e 85       	ldd	r25, Y+14	; 0x0e
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	4a ef       	ldi	r20, 0xFA	; 250
     dbe:	54 e4       	ldi	r21, 0x44	; 68
     dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	8f 83       	std	Y+7, r24	; 0x07
     dca:	98 87       	std	Y+8, r25	; 0x08
     dcc:	a9 87       	std	Y+9, r26	; 0x09
     dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd0:	6f 81       	ldd	r22, Y+7	; 0x07
     dd2:	78 85       	ldd	r23, Y+8	; 0x08
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e8       	ldi	r20, 0x80	; 128
     dde:	5f e3       	ldi	r21, 0x3F	; 63
     de0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     de4:	88 23       	and	r24, r24
     de6:	2c f4       	brge	.+10     	; 0xdf2 <LCD_init+0x162>
		__ticks = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9e 83       	std	Y+6, r25	; 0x06
     dee:	8d 83       	std	Y+5, r24	; 0x05
     df0:	3f c0       	rjmp	.+126    	; 0xe70 <LCD_init+0x1e0>
	else if (__tmp > 65535)
     df2:	6f 81       	ldd	r22, Y+7	; 0x07
     df4:	78 85       	ldd	r23, Y+8	; 0x08
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	3f ef       	ldi	r19, 0xFF	; 255
     dfe:	4f e7       	ldi	r20, 0x7F	; 127
     e00:	57 e4       	ldi	r21, 0x47	; 71
     e02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e06:	18 16       	cp	r1, r24
     e08:	4c f5       	brge	.+82     	; 0xe5c <LCD_init+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e2       	ldi	r20, 0x20	; 32
     e18:	51 e4       	ldi	r21, 0x41	; 65
     e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	0f c0       	rjmp	.+30     	; 0xe52 <LCD_init+0x1c2>
     e34:	88 ec       	ldi	r24, 0xC8	; 200
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9c 83       	std	Y+4, r25	; 0x04
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <LCD_init+0x1b0>
     e44:	9c 83       	std	Y+4, r25	; 0x04
     e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	69 f7       	brne	.-38     	; 0xe34 <LCD_init+0x1a4>
     e5a:	14 c0       	rjmp	.+40     	; 0xe84 <LCD_init+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5c:	6f 81       	ldd	r22, Y+7	; 0x07
     e5e:	78 85       	ldd	r23, Y+8	; 0x08
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <LCD_init+0x1ec>
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

	LCD_Send_Command(LCD_CLEAR_SCREEN); // clear screen
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>
#ifdef EIGHT_BIT_MODE
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES); //  set function  8 bit mode

#endif
#ifdef FOUR_BIT_MODE
	LCD_Send_Command(LCD_RETURN_HOME);
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
     e90:	88 e2       	ldi	r24, 0x28	; 40
     e92:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>

#endif

	LCD_Send_Command(LCD_ENTRY_MODE);
     e96:	86 e0       	ldi	r24, 0x06	; 6
     e98:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
     e9c:	80 e8       	ldi	r24, 0x80	; 128
     e9e:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
     ea2:	8f e0       	ldi	r24, 0x0F	; 15
     ea4:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>

}
     ea8:	6c 96       	adiw	r28, 0x1c	; 28
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <LCD_GotoXY>:



void LCD_GotoXY(unsigned char line, unsigned char position )
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <LCD_GotoXY+0x6>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	6a 83       	std	Y+2, r22	; 0x02

	if(line==LCD_FIRST_ROW)
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	88 23       	and	r24, r24
     ecc:	41 f4       	brne	.+16     	; 0xede <LCD_GotoXY+0x24>
	{
		if (position < 16 && position >=0)
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	80 31       	cpi	r24, 0x10	; 16
     ed2:	78 f4       	brcc	.+30     	; 0xef2 <LCD_GotoXY+0x38>
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW+position);
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	80 58       	subi	r24, 0x80	; 128
     ed8:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>
     edc:	0a c0       	rjmp	.+20     	; 0xef2 <LCD_GotoXY+0x38>
	}
	else if (line==LCD_SECOND_ROW)
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	39 f4       	brne	.+14     	; 0xef2 <LCD_GotoXY+0x38>
	{
		if (position < 16 && position >=0)
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	80 31       	cpi	r24, 0x10	; 16
     ee8:	20 f4       	brcc	.+8      	; 0xef2 <LCD_GotoXY+0x38>
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW + position);
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 54       	subi	r24, 0x40	; 64
     eee:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>
	}
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <LCD_Send_Command>:


void LCD_Send_Command(unsigned char command)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	89 83       	std	Y+1, r24	; 0x01
	LCD_ENABLE_DATA ();

#endif
#ifdef FOUR_BIT_MODE

	LCD_port = (LCD_port & 0x0F) | (command & 0xF0);
     f08:	ab e3       	ldi	r26, 0x3B	; 59
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e3       	ldi	r30, 0x3B	; 59
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	98 2f       	mov	r25, r24
     f14:	9f 70       	andi	r25, 0x0F	; 15
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	80 7f       	andi	r24, 0xF0	; 240
     f1a:	89 2b       	or	r24, r25
     f1c:	8c 93       	st	X, r24
	GPIO_u8_WritePinVal(LCD_control_PORT,RS,LOW);
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
	GPIO_u8_WritePinVal(LCD_control_PORT,RW,LOW);// write pin value rw , rs as low value
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	62 e0       	ldi	r22, 0x02	; 2
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
	LCD_ENABLE_DATA ();  // delay
     f32:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_ENABLE_DATA>
	LCD_port = (LCD_port & 0x0F) | (command << 4);
     f36:	ab e3       	ldi	r26, 0x3B	; 59
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e3       	ldi	r30, 0x3B	; 59
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	28 2f       	mov	r18, r24
     f42:	2f 70       	andi	r18, 0x0F	; 15
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	82 95       	swap	r24
     f4c:	92 95       	swap	r25
     f4e:	90 7f       	andi	r25, 0xF0	; 240
     f50:	98 27       	eor	r25, r24
     f52:	80 7f       	andi	r24, 0xF0	; 240
     f54:	98 27       	eor	r25, r24
     f56:	82 2b       	or	r24, r18
     f58:	8c 93       	st	X, r24
	GPIO_u8_WritePinVal(LCD_control_PORT,RS,LOW);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
	GPIO_u8_WritePinVal(LCD_control_PORT,RW,LOW);// write pin value rw , rs as low value
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
	LCD_ENABLE_DATA ();
     f6e:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_ENABLE_DATA>

#endif

}
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <LCD_Send_Character>:

void LCD_Send_Character(unsigned char character)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	89 83       	std	Y+1, r24	; 0x01
	GPIO_u8_WritePortVal(LCD_DATA_port,character);
	LCD_ENABLE_DATA ();
#endif

#ifdef FOUR_BIT_MODE
	LCD_port = (LCD_port & 0x0F) | (character & 0xF0);
     f86:	ab e3       	ldi	r26, 0x3B	; 59
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	eb e3       	ldi	r30, 0x3B	; 59
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	98 2f       	mov	r25, r24
     f92:	9f 70       	andi	r25, 0x0F	; 15
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	80 7f       	andi	r24, 0xF0	; 240
     f98:	89 2b       	or	r24, r25
     f9a:	8c 93       	st	X, r24
	    GPIO_u8_WritePinVal(LCD_control_PORT,RS,HIGH); //turn RS ON for Data mode.
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
		GPIO_u8_WritePinVal(LCD_control_PORT,RW,LOW);
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	62 e0       	ldi	r22, 0x02	; 2
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
		LCD_ENABLE_DATA ();
     fb0:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_ENABLE_DATA>
		LCD_port = (LCD_port & 0x0F) | (character << 4);
     fb4:	ab e3       	ldi	r26, 0x3B	; 59
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e3       	ldi	r30, 0x3B	; 59
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	2f 70       	andi	r18, 0x0F	; 15
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	82 95       	swap	r24
     fca:	92 95       	swap	r25
     fcc:	90 7f       	andi	r25, 0xF0	; 240
     fce:	98 27       	eor	r25, r24
     fd0:	80 7f       	andi	r24, 0xF0	; 240
     fd2:	98 27       	eor	r25, r24
     fd4:	82 2b       	or	r24, r18
     fd6:	8c 93       	st	X, r24
		GPIO_u8_WritePinVal(LCD_control_PORT,RS,HIGH); //turn RS ON for Data mode.
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
		GPIO_u8_WritePinVal(LCD_control_PORT,RW,LOW);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	62 e0       	ldi	r22, 0x02	; 2
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
		LCD_ENABLE_DATA ();
     fec:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_ENABLE_DATA>
#endif
}
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <LCD_Send_String>:


void LCD_Send_String(char *StringOfCharacters)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <LCD_Send_String+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <LCD_Send_String+0x8>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	8b 83       	std	Y+3, r24	; 0x03

	int count=0 ;//to count how much char on the line (it should be 16 char only)
    1008:	1a 82       	std	Y+2, r1	; 0x02
    100a:	19 82       	std	Y+1, r1	; 0x01
    100c:	2d c0       	rjmp	.+90     	; 0x1068 <LCD_Send_String+0x70>
	while(*StringOfCharacters > 0)
	{
		count++;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_Character(*StringOfCharacters++);
    1018:	eb 81       	ldd	r30, Y+3	; 0x03
    101a:	fc 81       	ldd	r31, Y+4	; 0x04
    101c:	20 81       	ld	r18, Z
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	82 2f       	mov	r24, r18
    102a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_Send_Character>
		if (count == 16  ) // go to the second line
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	80 31       	cpi	r24, 0x10	; 16
    1034:	91 05       	cpc	r25, r1
    1036:	29 f4       	brne	.+10     	; 0x1042 <LCD_Send_String+0x4a>
		{
			LCD_GotoXY(1,0); //line 1 position zero
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	0e 94 5d 07 	call	0xeba	; 0xeba <LCD_GotoXY>
    1040:	13 c0       	rjmp	.+38     	; 0x1068 <LCD_Send_String+0x70>
		}
		else if (count == 32 || count==33) // clear screen and show again
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	80 32       	cpi	r24, 0x20	; 32
    1048:	91 05       	cpc	r25, r1
    104a:	29 f0       	breq	.+10     	; 0x1056 <LCD_Send_String+0x5e>
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	81 32       	cpi	r24, 0x21	; 33
    1052:	91 05       	cpc	r25, r1
    1054:	49 f4       	brne	.+18     	; 0x1068 <LCD_Send_String+0x70>
		{
			LCD_Send_Command(LCD_CLEAR_SCREEN);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 7e 07 	call	0xefc	; 0xefc <LCD_Send_Command>
			LCD_GotoXY(0,0); //line 0 position zero
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	0e 94 5d 07 	call	0xeba	; 0xeba <LCD_GotoXY>
			count = 0 ;
    1064:	1a 82       	std	Y+2, r1	; 0x02
    1066:	19 82       	std	Y+1, r1	; 0x01

void LCD_Send_String(char *StringOfCharacters)
{

	int count=0 ;//to count how much char on the line (it should be 16 char only)
	while(*StringOfCharacters > 0)
    1068:	eb 81       	ldd	r30, Y+3	; 0x03
    106a:	fc 81       	ldd	r31, Y+4	; 0x04
    106c:	80 81       	ld	r24, Z
    106e:	88 23       	and	r24, r24
    1070:	71 f6       	brne	.-100    	; 0x100e <LCD_Send_String+0x16>
			LCD_Send_Command(LCD_CLEAR_SCREEN);
			LCD_GotoXY(0,0); //line 0 position zero
			count = 0 ;
		}
	}
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <LCD_ENABLE_DATA>:


void LCD_ENABLE_DATA ()
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	2e 97       	sbiw	r28, 0x0e	; 14
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
	GPIO_u8_WritePinVal(LCD_control_PORT,EN,LOW);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	63 e0       	ldi	r22, 0x03	; 3
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a8 e4       	ldi	r26, 0x48	; 72
    10a4:	b2 e4       	ldi	r27, 0x42	; 66
    10a6:	8b 87       	std	Y+11, r24	; 0x0b
    10a8:	9c 87       	std	Y+12, r25	; 0x0c
    10aa:	ad 87       	std	Y+13, r26	; 0x0d
    10ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	4a ef       	ldi	r20, 0xFA	; 250
    10bc:	54 e4       	ldi	r21, 0x44	; 68
    10be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	8f 83       	std	Y+7, r24	; 0x07
    10c8:	98 87       	std	Y+8, r25	; 0x08
    10ca:	a9 87       	std	Y+9, r26	; 0x09
    10cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ce:	6f 81       	ldd	r22, Y+7	; 0x07
    10d0:	78 85       	ldd	r23, Y+8	; 0x08
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <LCD_ENABLE_DATA+0x70>
		__ticks = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	3f c0       	rjmp	.+126    	; 0x116e <LCD_ENABLE_DATA+0xee>
	else if (__tmp > 65535)
    10f0:	6f 81       	ldd	r22, Y+7	; 0x07
    10f2:	78 85       	ldd	r23, Y+8	; 0x08
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	57 e4       	ldi	r21, 0x47	; 71
    1100:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1104:	18 16       	cp	r1, r24
    1106:	4c f5       	brge	.+82     	; 0x115a <LCD_ENABLE_DATA+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	6b 85       	ldd	r22, Y+11	; 0x0b
    110a:	7c 85       	ldd	r23, Y+12	; 0x0c
    110c:	8d 85       	ldd	r24, Y+13	; 0x0d
    110e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <LCD_ENABLE_DATA+0xd0>
    1132:	88 ec       	ldi	r24, 0xC8	; 200
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <LCD_ENABLE_DATA+0xbe>
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	69 f7       	brne	.-38     	; 0x1132 <LCD_ENABLE_DATA+0xb2>
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <LCD_ENABLE_DATA+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <LCD_ENABLE_DATA+0xfa>
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (50) ;
	GPIO_u8_WritePinVal(LCD_control_PORT,EN,HIGH);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	63 e0       	ldi	r22, 0x03	; 3
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_u8_WritePinVal>
}
    118c:	2e 96       	adiw	r28, 0x0e	; 14
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <LCD_display_number>:


void LCD_display_number (int Number )
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	29 97       	sbiw	r28, 0x09	; 9
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	99 87       	std	Y+9, r25	; 0x09
    11b4:	88 87       	std	Y+8, r24	; 0x08

	char  str[7];

	//sprintf(str,"%d",Number);	// Adjust the formatting to your liking.
 itoa(Number,str,10);
    11b6:	88 85       	ldd	r24, Y+8	; 0x08
    11b8:	99 85       	ldd	r25, Y+9	; 0x09
    11ba:	9e 01       	movw	r18, r28
    11bc:	2f 5f       	subi	r18, 0xFF	; 255
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	b9 01       	movw	r22, r18
    11c2:	4a e0       	ldi	r20, 0x0A	; 10
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <itoa>
	LCD_Send_String (str) ;
    11ca:	ce 01       	movw	r24, r28
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	0e 94 fc 07 	call	0xff8	; 0xff8 <LCD_Send_String>

}
    11d2:	29 96       	adiw	r28, 0x09	; 9
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <LCD_display_real_number>:

void LCD_display_real_number (double  Number )
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	a8 97       	sbiw	r28, 0x28	; 40
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	6f 8f       	std	Y+31, r22	; 0x1f
    11fa:	78 a3       	std	Y+32, r23	; 0x20
    11fc:	89 a3       	std	Y+33, r24	; 0x21
    11fe:	9a a3       	std	Y+34, r25	; 0x22

	char  str[16];


	char *tmpSign = (Number < 0) ? "-" : "";
    1200:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1202:	78 a1       	ldd	r23, Y+32	; 0x20
    1204:	89 a1       	ldd	r24, Y+33	; 0x21
    1206:	9a a1       	ldd	r25, Y+34	; 0x22
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1214:	88 23       	and	r24, r24
    1216:	2c f4       	brge	.+10     	; 0x1222 <LCD_display_real_number+0x3e>
    1218:	20 e6       	ldi	r18, 0x60	; 96
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	38 a7       	std	Y+40, r19	; 0x28
    121e:	2f a3       	std	Y+39, r18	; 0x27
    1220:	04 c0       	rjmp	.+8      	; 0x122a <LCD_display_real_number+0x46>
    1222:	42 e6       	ldi	r20, 0x62	; 98
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	58 a7       	std	Y+40, r21	; 0x28
    1228:	4f a3       	std	Y+39, r20	; 0x27
    122a:	8f a1       	ldd	r24, Y+39	; 0x27
    122c:	98 a5       	ldd	r25, Y+40	; 0x28
    122e:	9e 87       	std	Y+14, r25	; 0x0e
    1230:	8d 87       	std	Y+13, r24	; 0x0d
	float tmpVal = (Number < 0) ? -Number : Number;
    1232:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1234:	78 a1       	ldd	r23, Y+32	; 0x20
    1236:	89 a1       	ldd	r24, Y+33	; 0x21
    1238:	9a a1       	ldd	r25, Y+34	; 0x22
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1246:	88 23       	and	r24, r24
    1248:	64 f4       	brge	.+24     	; 0x1262 <LCD_display_real_number+0x7e>
    124a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    124c:	98 a1       	ldd	r25, Y+32	; 0x20
    124e:	a9 a1       	ldd	r26, Y+33	; 0x21
    1250:	ba a1       	ldd	r27, Y+34	; 0x22
    1252:	9c 01       	movw	r18, r24
    1254:	ad 01       	movw	r20, r26
    1256:	50 58       	subi	r21, 0x80	; 128
    1258:	2b a3       	std	Y+35, r18	; 0x23
    125a:	3c a3       	std	Y+36, r19	; 0x24
    125c:	4d a3       	std	Y+37, r20	; 0x25
    125e:	5e a3       	std	Y+38, r21	; 0x26
    1260:	08 c0       	rjmp	.+16     	; 0x1272 <LCD_display_real_number+0x8e>
    1262:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1264:	98 a1       	ldd	r25, Y+32	; 0x20
    1266:	a9 a1       	ldd	r26, Y+33	; 0x21
    1268:	ba a1       	ldd	r27, Y+34	; 0x22
    126a:	8b a3       	std	Y+35, r24	; 0x23
    126c:	9c a3       	std	Y+36, r25	; 0x24
    126e:	ad a3       	std	Y+37, r26	; 0x25
    1270:	be a3       	std	Y+38, r27	; 0x26
    1272:	2b a1       	ldd	r18, Y+35	; 0x23
    1274:	3c a1       	ldd	r19, Y+36	; 0x24
    1276:	4d a1       	ldd	r20, Y+37	; 0x25
    1278:	5e a1       	ldd	r21, Y+38	; 0x26
    127a:	29 87       	std	Y+9, r18	; 0x09
    127c:	3a 87       	std	Y+10, r19	; 0x0a
    127e:	4b 87       	std	Y+11, r20	; 0x0b
    1280:	5c 87       	std	Y+12, r21	; 0x0c

	int tmpInt1 = tmpVal;                  // Get the integer (678).
    1282:	69 85       	ldd	r22, Y+9	; 0x09
    1284:	7a 85       	ldd	r23, Y+10	; 0x0a
    1286:	8b 85       	ldd	r24, Y+11	; 0x0b
    1288:	9c 85       	ldd	r25, Y+12	; 0x0c
    128a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	98 87       	std	Y+8, r25	; 0x08
    1294:	8f 83       	std	Y+7, r24	; 0x07
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
    1296:	8f 81       	ldd	r24, Y+7	; 0x07
    1298:	98 85       	ldd	r25, Y+8	; 0x08
    129a:	aa 27       	eor	r26, r26
    129c:	97 fd       	sbrc	r25, 7
    129e:	a0 95       	com	r26
    12a0:	ba 2f       	mov	r27, r26
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	69 85       	ldd	r22, Y+9	; 0x09
    12b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b6:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8b 83       	std	Y+3, r24	; 0x03
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	ad 83       	std	Y+5, r26	; 0x05
    12c4:	be 83       	std	Y+6, r27	; 0x06
	int tmpInt2 = tmpFrac * 10000;  // Turn into integer (123).
    12c6:	6b 81       	ldd	r22, Y+3	; 0x03
    12c8:	7c 81       	ldd	r23, Y+4	; 0x04
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e4       	ldi	r19, 0x40	; 64
    12d2:	4c e1       	ldi	r20, 0x1C	; 28
    12d4:	56 e4       	ldi	r21, 0x46	; 70
    12d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01

	//extern char *dtostre(double __val, char *__s, unsigned char __prec,
	//dtostre( Number,str,3);

	// Print as parts, note that you need 0-padding for fractional bit.
	sprintf (str, "%s%d.%04d", tmpSign, tmpInt1, tmpInt2);
    12ee:	4d b7       	in	r20, 0x3d	; 61
    12f0:	5e b7       	in	r21, 0x3e	; 62
    12f2:	4a 50       	subi	r20, 0x0A	; 10
    12f4:	50 40       	sbci	r21, 0x00	; 0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	5e bf       	out	0x3e, r21	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	4d bf       	out	0x3d, r20	; 61
    1300:	ed b7       	in	r30, 0x3d	; 61
    1302:	fe b7       	in	r31, 0x3e	; 62
    1304:	31 96       	adiw	r30, 0x01	; 1
    1306:	ce 01       	movw	r24, r28
    1308:	0f 96       	adiw	r24, 0x0f	; 15
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	80 83       	st	Z, r24
    130e:	83 e6       	ldi	r24, 0x63	; 99
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	93 83       	std	Z+3, r25	; 0x03
    1314:	82 83       	std	Z+2, r24	; 0x02
    1316:	8d 85       	ldd	r24, Y+13	; 0x0d
    1318:	9e 85       	ldd	r25, Y+14	; 0x0e
    131a:	95 83       	std	Z+5, r25	; 0x05
    131c:	84 83       	std	Z+4, r24	; 0x04
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	97 83       	std	Z+7, r25	; 0x07
    1324:	86 83       	std	Z+6, r24	; 0x06
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	91 87       	std	Z+9, r25	; 0x09
    132c:	80 87       	std	Z+8, r24	; 0x08
    132e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <sprintf>
    1332:	8d b7       	in	r24, 0x3d	; 61
    1334:	9e b7       	in	r25, 0x3e	; 62
    1336:	0a 96       	adiw	r24, 0x0a	; 10
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	9e bf       	out	0x3e, r25	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	8d bf       	out	0x3d, r24	; 61
	LCD_Send_String (str) ;
    1342:	ce 01       	movw	r24, r28
    1344:	0f 96       	adiw	r24, 0x0f	; 15
    1346:	0e 94 fc 07 	call	0xff8	; 0xff8 <LCD_Send_String>

}
    134a:	a8 96       	adiw	r28, 0x28	; 40
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <GPIO_voidInit>:
AccessLOC  GPIO_ports[] = {AVR_PORTA,AVR_PORTB,AVR_PORTC,AVR_PORTD};
AccessLOC  GPIO_dirs[] = {AVR_DDRA,AVR_DDRB,AVR_DDRC,AVR_DDRD};
AccessLOC  GPIO_pins[] = {AVR_PINA,AVR_PINB,AVR_PINC,AVR_PIND};

 void GPIO_voidInit(void)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	/* DDR initialization  */
	*GPIO_dirs[PRTA] = Init_direction_default; // pointer to arrary of Data direction location
    1364:	e0 91 8b 01 	lds	r30, 0x018B
    1368:	f0 91 8c 01 	lds	r31, 0x018C
    136c:	10 82       	st	Z, r1
	*GPIO_dirs[PRTB] = Init_direction_default;
    136e:	e0 91 8d 01 	lds	r30, 0x018D
    1372:	f0 91 8e 01 	lds	r31, 0x018E
    1376:	10 82       	st	Z, r1
	*GPIO_dirs[PRTC] = Init_direction_default;
    1378:	e0 91 8f 01 	lds	r30, 0x018F
    137c:	f0 91 90 01 	lds	r31, 0x0190
    1380:	10 82       	st	Z, r1
	*GPIO_dirs[PRTD] = Init_direction_default;
    1382:	e0 91 91 01 	lds	r30, 0x0191
    1386:	f0 91 92 01 	lds	r31, 0x0192
    138a:	10 82       	st	Z, r1

}
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <GPIO_u8_ReadPinVal>:


u8 GPIO_u8_ReadPinVal(u8 Port_Name,u8 PinIdx, u8* PtrToVal)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <GPIO_u8_ReadPinVal+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <GPIO_u8_ReadPinVal+0x8>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	6b 83       	std	Y+3, r22	; 0x03
    13a4:	5d 83       	std	Y+5, r21	; 0x05
    13a6:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 30       	cpi	r24, 0x08	; 8
    13ac:	10 f0       	brcs	.+4      	; 0x13b2 <GPIO_u8_ReadPinVal+0x20>
	{
		API_Status = Error; // there is error
    13ae:	19 82       	std	Y+1, r1	; 0x01
    13b0:	1e c0       	rjmp	.+60     	; 0x13ee <GPIO_u8_ReadPinVal+0x5c>
	}
	else
	{

		*PtrToVal = GET_BIT(*GPIO_pins [Port_Name],PinIdx)  ;
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	fc 01       	movw	r30, r24
    13be:	ed 56       	subi	r30, 0x6D	; 109
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	01 90       	ld	r0, Z+
    13c4:	f0 81       	ld	r31, Z
    13c6:	e0 2d       	mov	r30, r0
    13c8:	80 81       	ld	r24, Z
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <GPIO_u8_ReadPinVal+0x4a>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <GPIO_u8_ReadPinVal+0x46>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	ec 81       	ldd	r30, Y+4	; 0x04
    13e6:	fd 81       	ldd	r31, Y+5	; 0x05
    13e8:	80 83       	st	Z, r24
		API_Status = NO_error; // successful process
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
	}

	return API_Status ;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01

}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <GPIO_u8_WritePinVal>:


u8 GPIO_u8_WritePinVal(u8 Port_Name,u8 PinIdx , u8 PinVal)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <GPIO_u8_WritePinVal+0x6>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <GPIO_u8_WritePinVal+0x8>
    1408:	00 d0       	rcall	.+0      	; 0x140a <GPIO_u8_WritePinVal+0xa>
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	8a 83       	std	Y+2, r24	; 0x02
    1410:	6b 83       	std	Y+3, r22	; 0x03
    1412:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	88 30       	cpi	r24, 0x08	; 8
    1418:	10 f0       	brcs	.+4      	; 0x141e <GPIO_u8_WritePinVal+0x1e>
	{
		API_Status = Error;
    141a:	19 82       	std	Y+1, r1	; 0x01
    141c:	5f c0       	rjmp	.+190    	; 0x14dc <GPIO_u8_WritePinVal+0xdc>
	}
	else
	{
		switch(PinVal)
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3e 83       	std	Y+6, r19	; 0x06
    1426:	2d 83       	std	Y+5, r18	; 0x05
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f1       	breq	.+90     	; 0x148a <GPIO_u8_WritePinVal+0x8a>
    1430:	2d 81       	ldd	r18, Y+5	; 0x05
    1432:	3e 81       	ldd	r19, Y+6	; 0x06
    1434:	21 30       	cpi	r18, 0x01	; 1
    1436:	31 05       	cpc	r19, r1
    1438:	09 f0       	breq	.+2      	; 0x143c <GPIO_u8_WritePinVal+0x3c>
    143a:	4f c0       	rjmp	.+158    	; 0x14da <GPIO_u8_WritePinVal+0xda>
		{
		case HIGH:
			 SET_BIT(*GPIO_ports[Port_Name] , PinIdx) ;
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	fc 01       	movw	r30, r24
    1448:	ed 57       	subi	r30, 0x7D	; 125
    144a:	fe 4f       	sbci	r31, 0xFE	; 254
    144c:	a0 81       	ld	r26, Z
    144e:	b1 81       	ldd	r27, Z+1	; 0x01
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	fc 01       	movw	r30, r24
    145c:	ed 57       	subi	r30, 0x7D	; 125
    145e:	fe 4f       	sbci	r31, 0xFE	; 254
    1460:	01 90       	ld	r0, Z+
    1462:	f0 81       	ld	r31, Z
    1464:	e0 2d       	mov	r30, r0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <GPIO_u8_WritePinVal+0x7c>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <GPIO_u8_WritePinVal+0x78>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
			API_Status = NO_error;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	29 c0       	rjmp	.+82     	; 0x14dc <GPIO_u8_WritePinVal+0xdc>
			break;
		case LOW:
			CLR_BIT(*GPIO_ports[Port_Name] , PinIdx) ;
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	fc 01       	movw	r30, r24
    1496:	ed 57       	subi	r30, 0x7D	; 125
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	a0 81       	ld	r26, Z
    149c:	b1 81       	ldd	r27, Z+1	; 0x01
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	fc 01       	movw	r30, r24
    14aa:	ed 57       	subi	r30, 0x7D	; 125
    14ac:	fe 4f       	sbci	r31, 0xFE	; 254
    14ae:	01 90       	ld	r0, Z+
    14b0:	f0 81       	ld	r31, Z
    14b2:	e0 2d       	mov	r30, r0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_u8_WritePinVal+0xca>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_u8_WritePinVal+0xc6>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
			API_Status = NO_error;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <GPIO_u8_WritePinVal+0xdc>
			break;
		default:
			API_Status = Error;
    14da:	19 82       	std	Y+1, r1	; 0x01
			break;

		}
	}

	return API_Status ;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    14de:	26 96       	adiw	r28, 0x06	; 6
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <GPIO_u8_WritePinDir>:


u8 GPIO_u8_WritePinDir(u8 Port_Name,u8 PinIdx , u8 PinDir)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_u8_WritePinDir+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_u8_WritePinDir+0x8>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_u8_WritePinDir+0xa>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	8a 83       	std	Y+2, r24	; 0x02
    1500:	6b 83       	std	Y+3, r22	; 0x03
    1502:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	88 30       	cpi	r24, 0x08	; 8
    1508:	10 f0       	brcs	.+4      	; 0x150e <GPIO_u8_WritePinDir+0x1e>
	{
		API_Status = Error;
    150a:	19 82       	std	Y+1, r1	; 0x01
    150c:	5f c0       	rjmp	.+190    	; 0x15cc <GPIO_u8_WritePinDir+0xdc>
	}
	else
	{
		switch(PinDir)
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3e 83       	std	Y+6, r19	; 0x06
    1516:	2d 83       	std	Y+5, r18	; 0x05
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f1       	breq	.+90     	; 0x157a <GPIO_u8_WritePinDir+0x8a>
    1520:	2d 81       	ldd	r18, Y+5	; 0x05
    1522:	3e 81       	ldd	r19, Y+6	; 0x06
    1524:	21 30       	cpi	r18, 0x01	; 1
    1526:	31 05       	cpc	r19, r1
    1528:	09 f0       	breq	.+2      	; 0x152c <GPIO_u8_WritePinDir+0x3c>
    152a:	4f c0       	rjmp	.+158    	; 0x15ca <GPIO_u8_WritePinDir+0xda>
		{
		case HIGH:
			SET_BIT(*GPIO_dirs[Port_Name] , PinIdx);
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	fc 01       	movw	r30, r24
    1538:	e5 57       	subi	r30, 0x75	; 117
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	a0 81       	ld	r26, Z
    153e:	b1 81       	ldd	r27, Z+1	; 0x01
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	fc 01       	movw	r30, r24
    154c:	e5 57       	subi	r30, 0x75	; 117
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	01 90       	ld	r0, Z+
    1552:	f0 81       	ld	r31, Z
    1554:	e0 2d       	mov	r30, r0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_u8_WritePinDir+0x7c>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_u8_WritePinDir+0x78>
    1570:	84 2b       	or	r24, r20
    1572:	8c 93       	st	X, r24
			API_Status = NO_error;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	29 c0       	rjmp	.+82     	; 0x15cc <GPIO_u8_WritePinDir+0xdc>
			break;
		case LOW:
			CLR_BIT(*GPIO_dirs[Port_Name] , PinIdx);
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	fc 01       	movw	r30, r24
    1586:	e5 57       	subi	r30, 0x75	; 117
    1588:	fe 4f       	sbci	r31, 0xFE	; 254
    158a:	a0 81       	ld	r26, Z
    158c:	b1 81       	ldd	r27, Z+1	; 0x01
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	fc 01       	movw	r30, r24
    159a:	e5 57       	subi	r30, 0x75	; 117
    159c:	fe 4f       	sbci	r31, 0xFE	; 254
    159e:	01 90       	ld	r0, Z+
    15a0:	f0 81       	ld	r31, Z
    15a2:	e0 2d       	mov	r30, r0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_u8_WritePinDir+0xca>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_u8_WritePinDir+0xc6>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
			API_Status = NO_error;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <GPIO_u8_WritePinDir+0xdc>
			break;
		default:
			API_Status = Error;
    15ca:	19 82       	std	Y+1, r1	; 0x01
			break;

		}
	}

	return API_Status ;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01

}
    15ce:	26 96       	adiw	r28, 0x06	; 6
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <GPIO_u8_ReadPinDir>:


u8 GPIO_u8_ReadPinDir(u8 Port_Name,u8 PinIdx , u8* PtrToDir )
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_u8_ReadPinDir+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <GPIO_u8_ReadPinDir+0x8>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	8a 83       	std	Y+2, r24	; 0x02
    15f0:	6b 83       	std	Y+3, r22	; 0x03
    15f2:	5d 83       	std	Y+5, r21	; 0x05
    15f4:	4c 83       	std	Y+4, r20	; 0x04

	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	88 30       	cpi	r24, 0x08	; 8
    15fa:	10 f0       	brcs	.+4      	; 0x1600 <GPIO_u8_ReadPinDir+0x20>
	{
		API_Status = Error;
    15fc:	19 82       	std	Y+1, r1	; 0x01
    15fe:	1e c0       	rjmp	.+60     	; 0x163c <GPIO_u8_ReadPinDir+0x5c>
	}
	else
	{
		*PtrToDir = GET_BIT(*GPIO_dirs [Port_Name],PinIdx)  ;
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	fc 01       	movw	r30, r24
    160c:	e5 57       	subi	r30, 0x75	; 117
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	01 90       	ld	r0, Z+
    1612:	f0 81       	ld	r31, Z
    1614:	e0 2d       	mov	r30, r0
    1616:	80 81       	ld	r24, Z
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a9 01       	movw	r20, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <GPIO_u8_ReadPinDir+0x4a>
    1626:	55 95       	asr	r21
    1628:	47 95       	ror	r20
    162a:	8a 95       	dec	r24
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <GPIO_u8_ReadPinDir+0x46>
    162e:	ca 01       	movw	r24, r20
    1630:	81 70       	andi	r24, 0x01	; 1
    1632:	ec 81       	ldd	r30, Y+4	; 0x04
    1634:	fd 81       	ldd	r31, Y+5	; 0x05
    1636:	80 83       	st	Z, r24
		API_Status = NO_error;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
	}

	return API_Status ;
    163c:	89 81       	ldd	r24, Y+1	; 0x01
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <GPIO_u8_ReadPortVal>:


u8 GPIO_u8_ReadPortVal(u8 Port_Name, u8* PtrToVal)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <GPIO_u8_ReadPortVal+0x6>
    1654:	0f 92       	push	r0
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	7b 83       	std	Y+3, r23	; 0x03
    165e:	6a 83       	std	Y+2, r22	; 0x02

	*PtrToVal =  *GPIO_pins [Port_Name ] ;
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	fc 01       	movw	r30, r24
    166c:	ed 56       	subi	r30, 0x6D	; 109
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	01 90       	ld	r0, Z+
    1672:	f0 81       	ld	r31, Z
    1674:	e0 2d       	mov	r30, r0
    1676:	80 81       	ld	r24, Z
    1678:	ea 81       	ldd	r30, Y+2	; 0x02
    167a:	fb 81       	ldd	r31, Y+3	; 0x03
    167c:	80 83       	st	Z, r24
	return NO_error ;
    167e:	81 e0       	ldi	r24, 0x01	; 1
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <GPIO_u8_WritePortVal>:


u8 GPIO_u8_WritePortVal(u8 Port_Name ,u8 PortVal )
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <GPIO_u8_WritePortVal+0x6>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	6a 83       	std	Y+2, r22	; 0x02
	*GPIO_ports[Port_Name] = PortVal ;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	88 2f       	mov	r24, r24
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	fc 01       	movw	r30, r24
    16a6:	ed 57       	subi	r30, 0x7D	; 125
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	01 90       	ld	r0, Z+
    16ac:	f0 81       	ld	r31, Z
    16ae:	e0 2d       	mov	r30, r0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 83       	st	Z, r24
	return NO_error ;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <GPIO_u8_WritePortDir>:


u8 GPIO_u8_WritePortDir( u8 Port_Name ,u8 PortDir)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <GPIO_u8_WritePortDir+0x6>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	6a 83       	std	Y+2, r22	; 0x02
	  *GPIO_dirs [Port_Name] = PortDir;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	fc 01       	movw	r30, r24
    16da:	e5 57       	subi	r30, 0x75	; 117
    16dc:	fe 4f       	sbci	r31, 0xFE	; 254
    16de:	01 90       	ld	r0, Z+
    16e0:	f0 81       	ld	r31, Z
    16e2:	e0 2d       	mov	r30, r0
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	80 83       	st	Z, r24

	return NO_error ;
    16e8:	81 e0       	ldi	r24, 0x01	; 1

}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <GPIO_u8_ReadPortDir>:


u8 GPIO_u8_ReadPortDir(u8 Port_Name, u8* Ptr2ToDir)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <GPIO_u8_ReadPortDir+0x6>
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	7b 83       	std	Y+3, r23	; 0x03
    1704:	6a 83       	std	Y+2, r22	; 0x02
	*Ptr2ToDir =  *GPIO_dirs[Port_Name];
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	fc 01       	movw	r30, r24
    1712:	e5 57       	subi	r30, 0x75	; 117
    1714:	fe 4f       	sbci	r31, 0xFE	; 254
    1716:	01 90       	ld	r0, Z+
    1718:	f0 81       	ld	r31, Z
    171a:	e0 2d       	mov	r30, r0
    171c:	80 81       	ld	r24, Z
    171e:	ea 81       	ldd	r30, Y+2	; 0x02
    1720:	fb 81       	ldd	r31, Y+3	; 0x03
    1722:	80 83       	st	Z, r24
	return NO_error ;
    1724:	81 e0       	ldi	r24, 0x01	; 1
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <Keypad_init>:

#include "keypad.h"
int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columnd
void  Keypad_init()
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	keypadDDR &= ~ (1<<R0)|(1<<R1)|(1<<R2)|(1<<R3);//set upper part of keypad port as input
    173a:	a1 e3       	ldi	r26, 0x31	; 49
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e1 e3       	ldi	r30, 0x31	; 49
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8c 93       	st	X, r24
	//this will be required for scanning the rows
	keypadDDR |= ((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));//set lower part of keypad port as output.This is
    1748:	a1 e3       	ldi	r26, 0x31	; 49
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e1 e3       	ldi	r30, 0x31	; 49
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	80 6f       	ori	r24, 0xF0	; 240
    1754:	8c 93       	st	X, r24
	//the part of the keypad port where the rows are connected.
	keypadPORT = 0xFF ;
    1756:	e2 e3       	ldi	r30, 0x32	; 50
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	80 83       	st	Z, r24
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <Keypad_getkey>:



char Keypad_getkey()
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	27 97       	sbiw	r28, 0x07	; 7
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
	int i, j;
	for(i = 0; i < 4; i++)
    1778:	1c 82       	std	Y+4, r1	; 0x04
    177a:	1b 82       	std	Y+3, r1	; 0x03
    177c:	37 c1       	rjmp	.+622    	; 0x19ec <Keypad_getkey+0x288>
	{
		keypadPORT |= ((1<<Key_padCol[0] ) | (1<<Key_padCol[1] ) | (1<<Key_padCol[2] ) | (1<<Key_padCol[3] ));
    177e:	a2 e3       	ldi	r26, 0x32	; 50
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e2 e3       	ldi	r30, 0x32	; 50
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	58 2f       	mov	r21, r24
    178a:	20 91 a3 01 	lds	r18, 0x01A3
    178e:	30 91 a4 01 	lds	r19, 0x01A4
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 c0       	rjmp	.+4      	; 0x179c <Keypad_getkey+0x38>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	2a 95       	dec	r18
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <Keypad_getkey+0x34>
    17a0:	48 2f       	mov	r20, r24
    17a2:	20 91 a5 01 	lds	r18, 0x01A5
    17a6:	30 91 a6 01 	lds	r19, 0x01A6
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <Keypad_getkey+0x50>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	2a 95       	dec	r18
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <Keypad_getkey+0x4c>
    17b8:	48 2b       	or	r20, r24
    17ba:	20 91 a7 01 	lds	r18, 0x01A7
    17be:	30 91 a8 01 	lds	r19, 0x01A8
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <Keypad_getkey+0x68>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	2a 95       	dec	r18
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <Keypad_getkey+0x64>
    17d0:	48 2b       	or	r20, r24
    17d2:	20 91 a9 01 	lds	r18, 0x01A9
    17d6:	30 91 aa 01 	lds	r19, 0x01AA
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <Keypad_getkey+0x80>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	2a 95       	dec	r18
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <Keypad_getkey+0x7c>
    17e8:	84 2b       	or	r24, r20
    17ea:	85 2b       	or	r24, r21
    17ec:	8c 93       	st	X, r24

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad
    17ee:	a2 e3       	ldi	r26, 0x32	; 50
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e2 e3       	ldi	r30, 0x32	; 50
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	fc 01       	movw	r30, r24
    1804:	ed 55       	subi	r30, 0x5D	; 93
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	20 81       	ld	r18, Z
    180a:	31 81       	ldd	r19, Z+1	; 0x01
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <Keypad_getkey+0xb4>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <Keypad_getkey+0xb0>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24

		for(j = 0; j < 4; j++)
    1822:	1a 82       	std	Y+2, r1	; 0x02
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	d7 c0       	rjmp	.+430    	; 0x19d6 <Keypad_getkey+0x272>
		{
			if(!(keypadPIN & (1<<Key_padRow[j])))//check if key is pressed
    1828:	e0 e3       	ldi	r30, 0x30	; 48
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	9a 81       	ldd	r25, Y+2	; 0x02
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	fc 01       	movw	r30, r24
    183c:	e5 56       	subi	r30, 0x65	; 101
    183e:	fe 4f       	sbci	r31, 0xFE	; 254
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	a9 01       	movw	r20, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <Keypad_getkey+0xe8>
    1848:	55 95       	asr	r21
    184a:	47 95       	ror	r20
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <Keypad_getkey+0xe4>
    1850:	ca 01       	movw	r24, r20
    1852:	81 70       	andi	r24, 0x01	; 1
    1854:	90 70       	andi	r25, 0x00	; 0
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	09 f0       	breq	.+2      	; 0x185c <Keypad_getkey+0xf8>
    185a:	b8 c0       	rjmp	.+368    	; 0x19cc <Keypad_getkey+0x268>
			{
				while(!(keypadPIN & (1<<Key_padRow[j])));  //wait for key to be released  (Single press)
    185c:	e0 e3       	ldi	r30, 0x30	; 48
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	fc 01       	movw	r30, r24
    1870:	e5 56       	subi	r30, 0x65	; 101
    1872:	fe 4f       	sbci	r31, 0xFE	; 254
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	a9 01       	movw	r20, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <Keypad_getkey+0x11c>
    187c:	55 95       	asr	r21
    187e:	47 95       	ror	r20
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <Keypad_getkey+0x118>
    1884:	ca 01       	movw	r24, r20
    1886:	81 70       	andi	r24, 0x01	; 1
    1888:	90 70       	andi	r25, 0x00	; 0
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	39 f3       	breq	.-50     	; 0x185c <Keypad_getkey+0xf8>
				switch(i)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	9f 83       	std	Y+7, r25	; 0x07
    1894:	8e 83       	std	Y+6, r24	; 0x06
    1896:	4e 81       	ldd	r20, Y+6	; 0x06
    1898:	5f 81       	ldd	r21, Y+7	; 0x07
    189a:	41 30       	cpi	r20, 0x01	; 1
    189c:	51 05       	cpc	r21, r1
    189e:	c1 f1       	breq	.+112    	; 0x1910 <Keypad_getkey+0x1ac>
    18a0:	8e 81       	ldd	r24, Y+6	; 0x06
    18a2:	9f 81       	ldd	r25, Y+7	; 0x07
    18a4:	82 30       	cpi	r24, 0x02	; 2
    18a6:	91 05       	cpc	r25, r1
    18a8:	34 f4       	brge	.+12     	; 0x18b6 <Keypad_getkey+0x152>
    18aa:	4e 81       	ldd	r20, Y+6	; 0x06
    18ac:	5f 81       	ldd	r21, Y+7	; 0x07
    18ae:	41 15       	cp	r20, r1
    18b0:	51 05       	cpc	r21, r1
    18b2:	71 f0       	breq	.+28     	; 0x18d0 <Keypad_getkey+0x16c>
    18b4:	8b c0       	rjmp	.+278    	; 0x19cc <Keypad_getkey+0x268>
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <Keypad_getkey+0x15e>
    18c0:	47 c0       	rjmp	.+142    	; 0x1950 <Keypad_getkey+0x1ec>
    18c2:	4e 81       	ldd	r20, Y+6	; 0x06
    18c4:	5f 81       	ldd	r21, Y+7	; 0x07
    18c6:	43 30       	cpi	r20, 0x03	; 3
    18c8:	51 05       	cpc	r21, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <Keypad_getkey+0x16a>
    18cc:	60 c0       	rjmp	.+192    	; 0x198e <Keypad_getkey+0x22a>
    18ce:	7e c0       	rjmp	.+252    	; 0x19cc <Keypad_getkey+0x268>
				{
				case(0):
                	{
					if (j == 0) return '7';
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	19 f4       	brne	.+6      	; 0x18de <Keypad_getkey+0x17a>
    18d8:	57 e3       	ldi	r21, 0x37	; 55
    18da:	5d 83       	std	Y+5, r21	; 0x05
    18dc:	8f c0       	rjmp	.+286    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 1) return '4';
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 05       	cpc	r25, r1
    18e6:	19 f4       	brne	.+6      	; 0x18ee <Keypad_getkey+0x18a>
    18e8:	84 e3       	ldi	r24, 0x34	; 52
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	87 c0       	rjmp	.+270    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 2) return '1';
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	82 30       	cpi	r24, 0x02	; 2
    18f4:	91 05       	cpc	r25, r1
    18f6:	19 f4       	brne	.+6      	; 0x18fe <Keypad_getkey+0x19a>
    18f8:	91 e3       	ldi	r25, 0x31	; 49
    18fa:	9d 83       	std	Y+5, r25	; 0x05
    18fc:	7f c0       	rjmp	.+254    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 3) return '?';
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	09 f0       	breq	.+2      	; 0x190a <Keypad_getkey+0x1a6>
    1908:	61 c0       	rjmp	.+194    	; 0x19cc <Keypad_getkey+0x268>
    190a:	4f e3       	ldi	r20, 0x3F	; 63
    190c:	4d 83       	std	Y+5, r20	; 0x05
    190e:	76 c0       	rjmp	.+236    	; 0x19fc <Keypad_getkey+0x298>
					break;
                	}
				case(1):
                	{
					if (j == 0) return '8';
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	19 f4       	brne	.+6      	; 0x191e <Keypad_getkey+0x1ba>
    1918:	58 e3       	ldi	r21, 0x38	; 56
    191a:	5d 83       	std	Y+5, r21	; 0x05
    191c:	6f c0       	rjmp	.+222    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 1) return '5';
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	91 05       	cpc	r25, r1
    1926:	19 f4       	brne	.+6      	; 0x192e <Keypad_getkey+0x1ca>
    1928:	85 e3       	ldi	r24, 0x35	; 53
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	67 c0       	rjmp	.+206    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 2) return '2';
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	91 05       	cpc	r25, r1
    1936:	19 f4       	brne	.+6      	; 0x193e <Keypad_getkey+0x1da>
    1938:	92 e3       	ldi	r25, 0x32	; 50
    193a:	9d 83       	std	Y+5, r25	; 0x05
    193c:	5f c0       	rjmp	.+190    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 3) return '0';
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	83 30       	cpi	r24, 0x03	; 3
    1944:	91 05       	cpc	r25, r1
    1946:	09 f0       	breq	.+2      	; 0x194a <Keypad_getkey+0x1e6>
    1948:	41 c0       	rjmp	.+130    	; 0x19cc <Keypad_getkey+0x268>
    194a:	40 e3       	ldi	r20, 0x30	; 48
    194c:	4d 83       	std	Y+5, r20	; 0x05
    194e:	56 c0       	rjmp	.+172    	; 0x19fc <Keypad_getkey+0x298>
					break;
                	}
				case(2):
                	{
					if (j == 0) return '9';
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	19 f4       	brne	.+6      	; 0x195e <Keypad_getkey+0x1fa>
    1958:	59 e3       	ldi	r21, 0x39	; 57
    195a:	5d 83       	std	Y+5, r21	; 0x05
    195c:	4f c0       	rjmp	.+158    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 1) return '6';
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	19 f4       	brne	.+6      	; 0x196e <Keypad_getkey+0x20a>
    1968:	86 e3       	ldi	r24, 0x36	; 54
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	47 c0       	rjmp	.+142    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 2) return '3';
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	91 05       	cpc	r25, r1
    1976:	19 f4       	brne	.+6      	; 0x197e <Keypad_getkey+0x21a>
    1978:	93 e3       	ldi	r25, 0x33	; 51
    197a:	9d 83       	std	Y+5, r25	; 0x05
    197c:	3f c0       	rjmp	.+126    	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 3) return '=';
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	83 30       	cpi	r24, 0x03	; 3
    1984:	91 05       	cpc	r25, r1
    1986:	11 f5       	brne	.+68     	; 0x19cc <Keypad_getkey+0x268>
    1988:	4d e3       	ldi	r20, 0x3D	; 61
    198a:	4d 83       	std	Y+5, r20	; 0x05
    198c:	37 c0       	rjmp	.+110    	; 0x19fc <Keypad_getkey+0x298>
					break;
                	}
				case(3):
                	{
					if (j == 0) return '/';
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	19 f4       	brne	.+6      	; 0x199c <Keypad_getkey+0x238>
    1996:	5f e2       	ldi	r21, 0x2F	; 47
    1998:	5d 83       	std	Y+5, r21	; 0x05
    199a:	30 c0       	rjmp	.+96     	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 1) return '*';
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	91 05       	cpc	r25, r1
    19a4:	19 f4       	brne	.+6      	; 0x19ac <Keypad_getkey+0x248>
    19a6:	8a e2       	ldi	r24, 0x2A	; 42
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	28 c0       	rjmp	.+80     	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 2) return '-';
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	91 05       	cpc	r25, r1
    19b4:	19 f4       	brne	.+6      	; 0x19bc <Keypad_getkey+0x258>
    19b6:	9d e2       	ldi	r25, 0x2D	; 45
    19b8:	9d 83       	std	Y+5, r25	; 0x05
    19ba:	20 c0       	rjmp	.+64     	; 0x19fc <Keypad_getkey+0x298>
					else if (j == 3) return '+';
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	83 30       	cpi	r24, 0x03	; 3
    19c2:	91 05       	cpc	r25, r1
    19c4:	19 f4       	brne	.+6      	; 0x19cc <Keypad_getkey+0x268>
    19c6:	4b e2       	ldi	r20, 0x2B	; 43
    19c8:	4d 83       	std	Y+5, r20	; 0x05
    19ca:	18 c0       	rjmp	.+48     	; 0x19fc <Keypad_getkey+0x298>
	{
		keypadPORT |= ((1<<Key_padCol[0] ) | (1<<Key_padCol[1] ) | (1<<Key_padCol[2] ) | (1<<Key_padCol[3] ));

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad

		for(j = 0; j < 4; j++)
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	91 05       	cpc	r25, r1
    19de:	0c f4       	brge	.+2      	; 0x19e2 <Keypad_getkey+0x27e>
    19e0:	23 cf       	rjmp	.-442    	; 0x1828 <Keypad_getkey+0xc4>


char Keypad_getkey()
{
	int i, j;
	for(i = 0; i < 4; i++)
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	91 05       	cpc	r25, r1
    19f4:	0c f4       	brge	.+2      	; 0x19f8 <Keypad_getkey+0x294>
    19f6:	c3 ce       	rjmp	.-634    	; 0x177e <Keypad_getkey+0x1a>
                	}
				}
			}
		}
	}
	return 'A';//Return 'A' if no key is pressed.
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	5d 83       	std	Y+5, r21	; 0x05
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19fe:	27 96       	adiw	r28, 0x07	; 7
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <main>:
 */
#include "keypad.h"
#include "LCD/LCD.h"

int main ()
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	2f 97       	sbiw	r28, 0x0f	; 15
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
LCD_init();
    1a24:	0e 94 48 06 	call	0xc90	; 0xc90 <LCD_init>
Keypad_init();
    1a28:	0e 94 99 0b 	call	0x1732	; 0x1732 <Keypad_init>

char pressed ;

while (1)
{
	LCD_Send_String("WELCOME SLEEM");
    1a2c:	8d e6       	ldi	r24, 0x6D	; 109
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 fc 07 	call	0xff8	; 0xff8 <LCD_Send_String>
	LCD_GotoXY(1,0);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	0e 94 5d 07 	call	0xeba	; 0xeba <LCD_GotoXY>
pressed = Keypad_getkey();
    1a3c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Keypad_getkey>
    1a40:	8f 87       	std	Y+15, r24	; 0x0f
 LCD_Send_Character(pressed);
    1a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a44:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_Send_Character>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	aa ef       	ldi	r26, 0xFA	; 250
    1a4e:	b3 e4       	ldi	r27, 0x43	; 67
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a e7       	ldi	r20, 0x7A	; 122
    1a66:	53 e4       	ldi	r21, 0x43	; 67
    1a68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <main+0x8a>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <main+0x108>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <main+0xea>
    1adc:	89 e1       	ldi	r24, 0x19	; 25
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <main+0xd8>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <main+0xcc>
    1b02:	94 cf       	rjmp	.-216    	; 0x1a2c <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <main+0x114>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	7f cf       	rjmp	.-258    	; 0x1a2c <main+0x1c>

00001b2e <__prologue_saves__>:
    1b2e:	2f 92       	push	r2
    1b30:	3f 92       	push	r3
    1b32:	4f 92       	push	r4
    1b34:	5f 92       	push	r5
    1b36:	6f 92       	push	r6
    1b38:	7f 92       	push	r7
    1b3a:	8f 92       	push	r8
    1b3c:	9f 92       	push	r9
    1b3e:	af 92       	push	r10
    1b40:	bf 92       	push	r11
    1b42:	cf 92       	push	r12
    1b44:	df 92       	push	r13
    1b46:	ef 92       	push	r14
    1b48:	ff 92       	push	r15
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	ca 1b       	sub	r28, r26
    1b58:	db 0b       	sbc	r29, r27
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	09 94       	ijmp

00001b66 <__epilogue_restores__>:
    1b66:	2a 88       	ldd	r2, Y+18	; 0x12
    1b68:	39 88       	ldd	r3, Y+17	; 0x11
    1b6a:	48 88       	ldd	r4, Y+16	; 0x10
    1b6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b70:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b72:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b74:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b76:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b78:	b9 84       	ldd	r11, Y+9	; 0x09
    1b7a:	c8 84       	ldd	r12, Y+8	; 0x08
    1b7c:	df 80       	ldd	r13, Y+7	; 0x07
    1b7e:	ee 80       	ldd	r14, Y+6	; 0x06
    1b80:	fd 80       	ldd	r15, Y+5	; 0x05
    1b82:	0c 81       	ldd	r16, Y+4	; 0x04
    1b84:	1b 81       	ldd	r17, Y+3	; 0x03
    1b86:	aa 81       	ldd	r26, Y+2	; 0x02
    1b88:	b9 81       	ldd	r27, Y+1	; 0x01
    1b8a:	ce 0f       	add	r28, r30
    1b8c:	d1 1d       	adc	r29, r1
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	ed 01       	movw	r28, r26
    1b9a:	08 95       	ret

00001b9c <itoa>:
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	9f 01       	movw	r18, r30
    1ba0:	e8 94       	clt
    1ba2:	42 30       	cpi	r20, 0x02	; 2
    1ba4:	c4 f0       	brlt	.+48     	; 0x1bd6 <itoa+0x3a>
    1ba6:	45 32       	cpi	r20, 0x25	; 37
    1ba8:	b4 f4       	brge	.+44     	; 0x1bd6 <itoa+0x3a>
    1baa:	4a 30       	cpi	r20, 0x0A	; 10
    1bac:	29 f4       	brne	.+10     	; 0x1bb8 <itoa+0x1c>
    1bae:	97 fb       	bst	r25, 7
    1bb0:	1e f4       	brtc	.+6      	; 0x1bb8 <itoa+0x1c>
    1bb2:	90 95       	com	r25
    1bb4:	81 95       	neg	r24
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	64 2f       	mov	r22, r20
    1bba:	77 27       	eor	r23, r23
    1bbc:	0e 94 a0 10 	call	0x2140	; 0x2140 <__udivmodhi4>
    1bc0:	80 5d       	subi	r24, 0xD0	; 208
    1bc2:	8a 33       	cpi	r24, 0x3A	; 58
    1bc4:	0c f0       	brlt	.+2      	; 0x1bc8 <itoa+0x2c>
    1bc6:	89 5d       	subi	r24, 0xD9	; 217
    1bc8:	81 93       	st	Z+, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	a1 f7       	brne	.-24     	; 0x1bb8 <itoa+0x1c>
    1bd0:	16 f4       	brtc	.+4      	; 0x1bd6 <itoa+0x3a>
    1bd2:	5d e2       	ldi	r21, 0x2D	; 45
    1bd4:	51 93       	st	Z+, r21
    1bd6:	10 82       	st	Z, r1
    1bd8:	c9 01       	movw	r24, r18
    1bda:	0c 94 06 10 	jmp	0x200c	; 0x200c <strrev>

00001bde <sprintf>:
    1bde:	ae e0       	ldi	r26, 0x0E	; 14
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 ef       	ldi	r30, 0xF5	; 245
    1be4:	fd e0       	ldi	r31, 0x0D	; 13
    1be6:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__prologue_saves__+0x1c>
    1bea:	0d 89       	ldd	r16, Y+21	; 0x15
    1bec:	1e 89       	ldd	r17, Y+22	; 0x16
    1bee:	86 e0       	ldi	r24, 0x06	; 6
    1bf0:	8c 83       	std	Y+4, r24	; 0x04
    1bf2:	1a 83       	std	Y+2, r17	; 0x02
    1bf4:	09 83       	std	Y+1, r16	; 0x01
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	9f e7       	ldi	r25, 0x7F	; 127
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	9e 01       	movw	r18, r28
    1c00:	27 5e       	subi	r18, 0xE7	; 231
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	ce 01       	movw	r24, r28
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	6f 89       	ldd	r22, Y+23	; 0x17
    1c0a:	78 8d       	ldd	r23, Y+24	; 0x18
    1c0c:	a9 01       	movw	r20, r18
    1c0e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <vfprintf>
    1c12:	2f 81       	ldd	r18, Y+7	; 0x07
    1c14:	38 85       	ldd	r19, Y+8	; 0x08
    1c16:	02 0f       	add	r16, r18
    1c18:	13 1f       	adc	r17, r19
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	10 82       	st	Z, r1
    1c1e:	2e 96       	adiw	r28, 0x0e	; 14
    1c20:	e4 e0       	ldi	r30, 0x04	; 4
    1c22:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__epilogue_restores__+0x1c>

00001c26 <vfprintf>:
    1c26:	ab e0       	ldi	r26, 0x0B	; 11
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e9 e1       	ldi	r30, 0x19	; 25
    1c2c:	fe e0       	ldi	r31, 0x0E	; 14
    1c2e:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__prologue_saves__>
    1c32:	3c 01       	movw	r6, r24
    1c34:	2b 01       	movw	r4, r22
    1c36:	5a 01       	movw	r10, r20
    1c38:	fc 01       	movw	r30, r24
    1c3a:	17 82       	std	Z+7, r1	; 0x07
    1c3c:	16 82       	std	Z+6, r1	; 0x06
    1c3e:	83 81       	ldd	r24, Z+3	; 0x03
    1c40:	81 fd       	sbrc	r24, 1
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <vfprintf+0x24>
    1c44:	6f ef       	ldi	r22, 0xFF	; 255
    1c46:	7f ef       	ldi	r23, 0xFF	; 255
    1c48:	c6 c1       	rjmp	.+908    	; 0x1fd6 <vfprintf+0x3b0>
    1c4a:	9a e0       	ldi	r25, 0x0A	; 10
    1c4c:	89 2e       	mov	r8, r25
    1c4e:	1e 01       	movw	r2, r28
    1c50:	08 94       	sec
    1c52:	21 1c       	adc	r2, r1
    1c54:	31 1c       	adc	r3, r1
    1c56:	f3 01       	movw	r30, r6
    1c58:	23 81       	ldd	r18, Z+3	; 0x03
    1c5a:	f2 01       	movw	r30, r4
    1c5c:	23 fd       	sbrc	r18, 3
    1c5e:	85 91       	lpm	r24, Z+
    1c60:	23 ff       	sbrs	r18, 3
    1c62:	81 91       	ld	r24, Z+
    1c64:	2f 01       	movw	r4, r30
    1c66:	88 23       	and	r24, r24
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <vfprintf+0x46>
    1c6a:	b2 c1       	rjmp	.+868    	; 0x1fd0 <vfprintf+0x3aa>
    1c6c:	85 32       	cpi	r24, 0x25	; 37
    1c6e:	39 f4       	brne	.+14     	; 0x1c7e <vfprintf+0x58>
    1c70:	23 fd       	sbrc	r18, 3
    1c72:	85 91       	lpm	r24, Z+
    1c74:	23 ff       	sbrs	r18, 3
    1c76:	81 91       	ld	r24, Z+
    1c78:	2f 01       	movw	r4, r30
    1c7a:	85 32       	cpi	r24, 0x25	; 37
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <vfprintf+0x62>
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	b3 01       	movw	r22, r6
    1c82:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1c86:	e7 cf       	rjmp	.-50     	; 0x1c56 <vfprintf+0x30>
    1c88:	98 2f       	mov	r25, r24
    1c8a:	ff 24       	eor	r15, r15
    1c8c:	ee 24       	eor	r14, r14
    1c8e:	99 24       	eor	r9, r9
    1c90:	ff e1       	ldi	r31, 0x1F	; 31
    1c92:	ff 15       	cp	r31, r15
    1c94:	d0 f0       	brcs	.+52     	; 0x1cca <vfprintf+0xa4>
    1c96:	9b 32       	cpi	r25, 0x2B	; 43
    1c98:	69 f0       	breq	.+26     	; 0x1cb4 <vfprintf+0x8e>
    1c9a:	9c 32       	cpi	r25, 0x2C	; 44
    1c9c:	28 f4       	brcc	.+10     	; 0x1ca8 <vfprintf+0x82>
    1c9e:	90 32       	cpi	r25, 0x20	; 32
    1ca0:	59 f0       	breq	.+22     	; 0x1cb8 <vfprintf+0x92>
    1ca2:	93 32       	cpi	r25, 0x23	; 35
    1ca4:	91 f4       	brne	.+36     	; 0x1cca <vfprintf+0xa4>
    1ca6:	0e c0       	rjmp	.+28     	; 0x1cc4 <vfprintf+0x9e>
    1ca8:	9d 32       	cpi	r25, 0x2D	; 45
    1caa:	49 f0       	breq	.+18     	; 0x1cbe <vfprintf+0x98>
    1cac:	90 33       	cpi	r25, 0x30	; 48
    1cae:	69 f4       	brne	.+26     	; 0x1cca <vfprintf+0xa4>
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	24 c0       	rjmp	.+72     	; 0x1cfc <vfprintf+0xd6>
    1cb4:	52 e0       	ldi	r21, 0x02	; 2
    1cb6:	f5 2a       	or	r15, r21
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	f8 2a       	or	r15, r24
    1cbc:	28 c0       	rjmp	.+80     	; 0x1d0e <vfprintf+0xe8>
    1cbe:	98 e0       	ldi	r25, 0x08	; 8
    1cc0:	f9 2a       	or	r15, r25
    1cc2:	25 c0       	rjmp	.+74     	; 0x1d0e <vfprintf+0xe8>
    1cc4:	e0 e1       	ldi	r30, 0x10	; 16
    1cc6:	fe 2a       	or	r15, r30
    1cc8:	22 c0       	rjmp	.+68     	; 0x1d0e <vfprintf+0xe8>
    1cca:	f7 fc       	sbrc	r15, 7
    1ccc:	29 c0       	rjmp	.+82     	; 0x1d20 <vfprintf+0xfa>
    1cce:	89 2f       	mov	r24, r25
    1cd0:	80 53       	subi	r24, 0x30	; 48
    1cd2:	8a 30       	cpi	r24, 0x0A	; 10
    1cd4:	70 f4       	brcc	.+28     	; 0x1cf2 <vfprintf+0xcc>
    1cd6:	f6 fe       	sbrs	r15, 6
    1cd8:	05 c0       	rjmp	.+10     	; 0x1ce4 <vfprintf+0xbe>
    1cda:	98 9c       	mul	r9, r8
    1cdc:	90 2c       	mov	r9, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	98 0e       	add	r9, r24
    1ce2:	15 c0       	rjmp	.+42     	; 0x1d0e <vfprintf+0xe8>
    1ce4:	e8 9c       	mul	r14, r8
    1ce6:	e0 2c       	mov	r14, r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	e8 0e       	add	r14, r24
    1cec:	f0 e2       	ldi	r31, 0x20	; 32
    1cee:	ff 2a       	or	r15, r31
    1cf0:	0e c0       	rjmp	.+28     	; 0x1d0e <vfprintf+0xe8>
    1cf2:	9e 32       	cpi	r25, 0x2E	; 46
    1cf4:	29 f4       	brne	.+10     	; 0x1d00 <vfprintf+0xda>
    1cf6:	f6 fc       	sbrc	r15, 6
    1cf8:	6b c1       	rjmp	.+726    	; 0x1fd0 <vfprintf+0x3aa>
    1cfa:	40 e4       	ldi	r20, 0x40	; 64
    1cfc:	f4 2a       	or	r15, r20
    1cfe:	07 c0       	rjmp	.+14     	; 0x1d0e <vfprintf+0xe8>
    1d00:	9c 36       	cpi	r25, 0x6C	; 108
    1d02:	19 f4       	brne	.+6      	; 0x1d0a <vfprintf+0xe4>
    1d04:	50 e8       	ldi	r21, 0x80	; 128
    1d06:	f5 2a       	or	r15, r21
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <vfprintf+0xe8>
    1d0a:	98 36       	cpi	r25, 0x68	; 104
    1d0c:	49 f4       	brne	.+18     	; 0x1d20 <vfprintf+0xfa>
    1d0e:	f2 01       	movw	r30, r4
    1d10:	23 fd       	sbrc	r18, 3
    1d12:	95 91       	lpm	r25, Z+
    1d14:	23 ff       	sbrs	r18, 3
    1d16:	91 91       	ld	r25, Z+
    1d18:	2f 01       	movw	r4, r30
    1d1a:	99 23       	and	r25, r25
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <vfprintf+0xfa>
    1d1e:	b8 cf       	rjmp	.-144    	; 0x1c90 <vfprintf+0x6a>
    1d20:	89 2f       	mov	r24, r25
    1d22:	85 54       	subi	r24, 0x45	; 69
    1d24:	83 30       	cpi	r24, 0x03	; 3
    1d26:	18 f0       	brcs	.+6      	; 0x1d2e <vfprintf+0x108>
    1d28:	80 52       	subi	r24, 0x20	; 32
    1d2a:	83 30       	cpi	r24, 0x03	; 3
    1d2c:	38 f4       	brcc	.+14     	; 0x1d3c <vfprintf+0x116>
    1d2e:	44 e0       	ldi	r20, 0x04	; 4
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	a4 0e       	add	r10, r20
    1d34:	b5 1e       	adc	r11, r21
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	59 83       	std	Y+1, r21	; 0x01
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <vfprintf+0x134>
    1d3c:	93 36       	cpi	r25, 0x63	; 99
    1d3e:	31 f0       	breq	.+12     	; 0x1d4c <vfprintf+0x126>
    1d40:	93 37       	cpi	r25, 0x73	; 115
    1d42:	79 f0       	breq	.+30     	; 0x1d62 <vfprintf+0x13c>
    1d44:	93 35       	cpi	r25, 0x53	; 83
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <vfprintf+0x124>
    1d48:	56 c0       	rjmp	.+172    	; 0x1df6 <vfprintf+0x1d0>
    1d4a:	20 c0       	rjmp	.+64     	; 0x1d8c <vfprintf+0x166>
    1d4c:	f5 01       	movw	r30, r10
    1d4e:	80 81       	ld	r24, Z
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	42 e0       	ldi	r20, 0x02	; 2
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	a4 0e       	add	r10, r20
    1d58:	b5 1e       	adc	r11, r21
    1d5a:	61 01       	movw	r12, r2
    1d5c:	01 e0       	ldi	r16, 0x01	; 1
    1d5e:	10 e0       	ldi	r17, 0x00	; 0
    1d60:	12 c0       	rjmp	.+36     	; 0x1d86 <vfprintf+0x160>
    1d62:	f5 01       	movw	r30, r10
    1d64:	c0 80       	ld	r12, Z
    1d66:	d1 80       	ldd	r13, Z+1	; 0x01
    1d68:	f6 fc       	sbrc	r15, 6
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <vfprintf+0x14c>
    1d6c:	6f ef       	ldi	r22, 0xFF	; 255
    1d6e:	7f ef       	ldi	r23, 0xFF	; 255
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x150>
    1d72:	69 2d       	mov	r22, r9
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	42 e0       	ldi	r20, 0x02	; 2
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	a4 0e       	add	r10, r20
    1d7c:	b5 1e       	adc	r11, r21
    1d7e:	c6 01       	movw	r24, r12
    1d80:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <strnlen>
    1d84:	8c 01       	movw	r16, r24
    1d86:	5f e7       	ldi	r21, 0x7F	; 127
    1d88:	f5 22       	and	r15, r21
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <vfprintf+0x18e>
    1d8c:	f5 01       	movw	r30, r10
    1d8e:	c0 80       	ld	r12, Z
    1d90:	d1 80       	ldd	r13, Z+1	; 0x01
    1d92:	f6 fc       	sbrc	r15, 6
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <vfprintf+0x176>
    1d96:	6f ef       	ldi	r22, 0xFF	; 255
    1d98:	7f ef       	ldi	r23, 0xFF	; 255
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <vfprintf+0x17a>
    1d9c:	69 2d       	mov	r22, r9
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	42 e0       	ldi	r20, 0x02	; 2
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	a4 0e       	add	r10, r20
    1da6:	b5 1e       	adc	r11, r21
    1da8:	c6 01       	movw	r24, r12
    1daa:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <strnlen_P>
    1dae:	8c 01       	movw	r16, r24
    1db0:	50 e8       	ldi	r21, 0x80	; 128
    1db2:	f5 2a       	or	r15, r21
    1db4:	f3 fe       	sbrs	r15, 3
    1db6:	07 c0       	rjmp	.+14     	; 0x1dc6 <vfprintf+0x1a0>
    1db8:	1a c0       	rjmp	.+52     	; 0x1dee <vfprintf+0x1c8>
    1dba:	80 e2       	ldi	r24, 0x20	; 32
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	b3 01       	movw	r22, r6
    1dc0:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1dc4:	ea 94       	dec	r14
    1dc6:	8e 2d       	mov	r24, r14
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	08 17       	cp	r16, r24
    1dcc:	19 07       	cpc	r17, r25
    1dce:	a8 f3       	brcs	.-22     	; 0x1dba <vfprintf+0x194>
    1dd0:	0e c0       	rjmp	.+28     	; 0x1dee <vfprintf+0x1c8>
    1dd2:	f6 01       	movw	r30, r12
    1dd4:	f7 fc       	sbrc	r15, 7
    1dd6:	85 91       	lpm	r24, Z+
    1dd8:	f7 fe       	sbrs	r15, 7
    1dda:	81 91       	ld	r24, Z+
    1ddc:	6f 01       	movw	r12, r30
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	b3 01       	movw	r22, r6
    1de2:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1de6:	e1 10       	cpse	r14, r1
    1de8:	ea 94       	dec	r14
    1dea:	01 50       	subi	r16, 0x01	; 1
    1dec:	10 40       	sbci	r17, 0x00	; 0
    1dee:	01 15       	cp	r16, r1
    1df0:	11 05       	cpc	r17, r1
    1df2:	79 f7       	brne	.-34     	; 0x1dd2 <vfprintf+0x1ac>
    1df4:	ea c0       	rjmp	.+468    	; 0x1fca <vfprintf+0x3a4>
    1df6:	94 36       	cpi	r25, 0x64	; 100
    1df8:	11 f0       	breq	.+4      	; 0x1dfe <vfprintf+0x1d8>
    1dfa:	99 36       	cpi	r25, 0x69	; 105
    1dfc:	69 f5       	brne	.+90     	; 0x1e58 <vfprintf+0x232>
    1dfe:	f7 fe       	sbrs	r15, 7
    1e00:	08 c0       	rjmp	.+16     	; 0x1e12 <vfprintf+0x1ec>
    1e02:	f5 01       	movw	r30, r10
    1e04:	20 81       	ld	r18, Z
    1e06:	31 81       	ldd	r19, Z+1	; 0x01
    1e08:	42 81       	ldd	r20, Z+2	; 0x02
    1e0a:	53 81       	ldd	r21, Z+3	; 0x03
    1e0c:	84 e0       	ldi	r24, 0x04	; 4
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0a c0       	rjmp	.+20     	; 0x1e26 <vfprintf+0x200>
    1e12:	f5 01       	movw	r30, r10
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	9c 01       	movw	r18, r24
    1e1a:	44 27       	eor	r20, r20
    1e1c:	37 fd       	sbrc	r19, 7
    1e1e:	40 95       	com	r20
    1e20:	54 2f       	mov	r21, r20
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	a8 0e       	add	r10, r24
    1e28:	b9 1e       	adc	r11, r25
    1e2a:	9f e6       	ldi	r25, 0x6F	; 111
    1e2c:	f9 22       	and	r15, r25
    1e2e:	57 ff       	sbrs	r21, 7
    1e30:	09 c0       	rjmp	.+18     	; 0x1e44 <vfprintf+0x21e>
    1e32:	50 95       	com	r21
    1e34:	40 95       	com	r20
    1e36:	30 95       	com	r19
    1e38:	21 95       	neg	r18
    1e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e40:	e0 e8       	ldi	r30, 0x80	; 128
    1e42:	fe 2a       	or	r15, r30
    1e44:	ca 01       	movw	r24, r20
    1e46:	b9 01       	movw	r22, r18
    1e48:	a1 01       	movw	r20, r2
    1e4a:	2a e0       	ldi	r18, 0x0A	; 10
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	0e 94 42 10 	call	0x2084	; 0x2084 <__ultoa_invert>
    1e52:	d8 2e       	mov	r13, r24
    1e54:	d2 18       	sub	r13, r2
    1e56:	40 c0       	rjmp	.+128    	; 0x1ed8 <vfprintf+0x2b2>
    1e58:	95 37       	cpi	r25, 0x75	; 117
    1e5a:	29 f4       	brne	.+10     	; 0x1e66 <vfprintf+0x240>
    1e5c:	1f 2d       	mov	r17, r15
    1e5e:	1f 7e       	andi	r17, 0xEF	; 239
    1e60:	2a e0       	ldi	r18, 0x0A	; 10
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	1d c0       	rjmp	.+58     	; 0x1ea0 <vfprintf+0x27a>
    1e66:	1f 2d       	mov	r17, r15
    1e68:	19 7f       	andi	r17, 0xF9	; 249
    1e6a:	9f 36       	cpi	r25, 0x6F	; 111
    1e6c:	61 f0       	breq	.+24     	; 0x1e86 <vfprintf+0x260>
    1e6e:	90 37       	cpi	r25, 0x70	; 112
    1e70:	20 f4       	brcc	.+8      	; 0x1e7a <vfprintf+0x254>
    1e72:	98 35       	cpi	r25, 0x58	; 88
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <vfprintf+0x252>
    1e76:	ac c0       	rjmp	.+344    	; 0x1fd0 <vfprintf+0x3aa>
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <vfprintf+0x272>
    1e7a:	90 37       	cpi	r25, 0x70	; 112
    1e7c:	39 f0       	breq	.+14     	; 0x1e8c <vfprintf+0x266>
    1e7e:	98 37       	cpi	r25, 0x78	; 120
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <vfprintf+0x25e>
    1e82:	a6 c0       	rjmp	.+332    	; 0x1fd0 <vfprintf+0x3aa>
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <vfprintf+0x268>
    1e86:	28 e0       	ldi	r18, 0x08	; 8
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	0a c0       	rjmp	.+20     	; 0x1ea0 <vfprintf+0x27a>
    1e8c:	10 61       	ori	r17, 0x10	; 16
    1e8e:	14 fd       	sbrc	r17, 4
    1e90:	14 60       	ori	r17, 0x04	; 4
    1e92:	20 e1       	ldi	r18, 0x10	; 16
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <vfprintf+0x27a>
    1e98:	14 fd       	sbrc	r17, 4
    1e9a:	16 60       	ori	r17, 0x06	; 6
    1e9c:	20 e1       	ldi	r18, 0x10	; 16
    1e9e:	32 e0       	ldi	r19, 0x02	; 2
    1ea0:	17 ff       	sbrs	r17, 7
    1ea2:	08 c0       	rjmp	.+16     	; 0x1eb4 <vfprintf+0x28e>
    1ea4:	f5 01       	movw	r30, r10
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	44 e0       	ldi	r20, 0x04	; 4
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <vfprintf+0x29e>
    1eb4:	f5 01       	movw	r30, r10
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	bc 01       	movw	r22, r24
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	42 e0       	ldi	r20, 0x02	; 2
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	a4 0e       	add	r10, r20
    1ec6:	b5 1e       	adc	r11, r21
    1ec8:	a1 01       	movw	r20, r2
    1eca:	0e 94 42 10 	call	0x2084	; 0x2084 <__ultoa_invert>
    1ece:	d8 2e       	mov	r13, r24
    1ed0:	d2 18       	sub	r13, r2
    1ed2:	8f e7       	ldi	r24, 0x7F	; 127
    1ed4:	f8 2e       	mov	r15, r24
    1ed6:	f1 22       	and	r15, r17
    1ed8:	f6 fe       	sbrs	r15, 6
    1eda:	0b c0       	rjmp	.+22     	; 0x1ef2 <vfprintf+0x2cc>
    1edc:	5e ef       	ldi	r21, 0xFE	; 254
    1ede:	f5 22       	and	r15, r21
    1ee0:	d9 14       	cp	r13, r9
    1ee2:	38 f4       	brcc	.+14     	; 0x1ef2 <vfprintf+0x2cc>
    1ee4:	f4 fe       	sbrs	r15, 4
    1ee6:	07 c0       	rjmp	.+14     	; 0x1ef6 <vfprintf+0x2d0>
    1ee8:	f2 fc       	sbrc	r15, 2
    1eea:	05 c0       	rjmp	.+10     	; 0x1ef6 <vfprintf+0x2d0>
    1eec:	8f ee       	ldi	r24, 0xEF	; 239
    1eee:	f8 22       	and	r15, r24
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <vfprintf+0x2d0>
    1ef2:	1d 2d       	mov	r17, r13
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <vfprintf+0x2d2>
    1ef6:	19 2d       	mov	r17, r9
    1ef8:	f4 fe       	sbrs	r15, 4
    1efa:	0d c0       	rjmp	.+26     	; 0x1f16 <vfprintf+0x2f0>
    1efc:	fe 01       	movw	r30, r28
    1efe:	ed 0d       	add	r30, r13
    1f00:	f1 1d       	adc	r31, r1
    1f02:	80 81       	ld	r24, Z
    1f04:	80 33       	cpi	r24, 0x30	; 48
    1f06:	19 f4       	brne	.+6      	; 0x1f0e <vfprintf+0x2e8>
    1f08:	99 ee       	ldi	r25, 0xE9	; 233
    1f0a:	f9 22       	and	r15, r25
    1f0c:	08 c0       	rjmp	.+16     	; 0x1f1e <vfprintf+0x2f8>
    1f0e:	1f 5f       	subi	r17, 0xFF	; 255
    1f10:	f2 fe       	sbrs	r15, 2
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <vfprintf+0x2f8>
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <vfprintf+0x2f6>
    1f16:	8f 2d       	mov	r24, r15
    1f18:	86 78       	andi	r24, 0x86	; 134
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <vfprintf+0x2f8>
    1f1c:	1f 5f       	subi	r17, 0xFF	; 255
    1f1e:	0f 2d       	mov	r16, r15
    1f20:	f3 fc       	sbrc	r15, 3
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <vfprintf+0x326>
    1f24:	f0 fe       	sbrs	r15, 0
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <vfprintf+0x320>
    1f28:	1e 15       	cp	r17, r14
    1f2a:	10 f0       	brcs	.+4      	; 0x1f30 <vfprintf+0x30a>
    1f2c:	9d 2c       	mov	r9, r13
    1f2e:	0b c0       	rjmp	.+22     	; 0x1f46 <vfprintf+0x320>
    1f30:	9d 2c       	mov	r9, r13
    1f32:	9e 0c       	add	r9, r14
    1f34:	91 1a       	sub	r9, r17
    1f36:	1e 2d       	mov	r17, r14
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <vfprintf+0x320>
    1f3a:	80 e2       	ldi	r24, 0x20	; 32
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	b3 01       	movw	r22, r6
    1f40:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1f44:	1f 5f       	subi	r17, 0xFF	; 255
    1f46:	1e 15       	cp	r17, r14
    1f48:	c0 f3       	brcs	.-16     	; 0x1f3a <vfprintf+0x314>
    1f4a:	04 c0       	rjmp	.+8      	; 0x1f54 <vfprintf+0x32e>
    1f4c:	1e 15       	cp	r17, r14
    1f4e:	10 f4       	brcc	.+4      	; 0x1f54 <vfprintf+0x32e>
    1f50:	e1 1a       	sub	r14, r17
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <vfprintf+0x330>
    1f54:	ee 24       	eor	r14, r14
    1f56:	04 ff       	sbrs	r16, 4
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <vfprintf+0x352>
    1f5a:	80 e3       	ldi	r24, 0x30	; 48
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	b3 01       	movw	r22, r6
    1f60:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1f64:	02 ff       	sbrs	r16, 2
    1f66:	1d c0       	rjmp	.+58     	; 0x1fa2 <vfprintf+0x37c>
    1f68:	01 fd       	sbrc	r16, 1
    1f6a:	03 c0       	rjmp	.+6      	; 0x1f72 <vfprintf+0x34c>
    1f6c:	88 e7       	ldi	r24, 0x78	; 120
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e c0       	rjmp	.+28     	; 0x1f8e <vfprintf+0x368>
    1f72:	88 e5       	ldi	r24, 0x58	; 88
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0b c0       	rjmp	.+22     	; 0x1f8e <vfprintf+0x368>
    1f78:	80 2f       	mov	r24, r16
    1f7a:	86 78       	andi	r24, 0x86	; 134
    1f7c:	91 f0       	breq	.+36     	; 0x1fa2 <vfprintf+0x37c>
    1f7e:	01 ff       	sbrs	r16, 1
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <vfprintf+0x360>
    1f82:	8b e2       	ldi	r24, 0x2B	; 43
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <vfprintf+0x362>
    1f86:	80 e2       	ldi	r24, 0x20	; 32
    1f88:	f7 fc       	sbrc	r15, 7
    1f8a:	8d e2       	ldi	r24, 0x2D	; 45
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	b3 01       	movw	r22, r6
    1f90:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <vfprintf+0x37c>
    1f96:	80 e3       	ldi	r24, 0x30	; 48
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	b3 01       	movw	r22, r6
    1f9c:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1fa0:	9a 94       	dec	r9
    1fa2:	d9 14       	cp	r13, r9
    1fa4:	c0 f3       	brcs	.-16     	; 0x1f96 <vfprintf+0x370>
    1fa6:	da 94       	dec	r13
    1fa8:	f1 01       	movw	r30, r2
    1faa:	ed 0d       	add	r30, r13
    1fac:	f1 1d       	adc	r31, r1
    1fae:	80 81       	ld	r24, Z
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	b3 01       	movw	r22, r6
    1fb4:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1fb8:	dd 20       	and	r13, r13
    1fba:	a9 f7       	brne	.-22     	; 0x1fa6 <vfprintf+0x380>
    1fbc:	06 c0       	rjmp	.+12     	; 0x1fca <vfprintf+0x3a4>
    1fbe:	80 e2       	ldi	r24, 0x20	; 32
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	b3 01       	movw	r22, r6
    1fc4:	0e 94 16 10 	call	0x202c	; 0x202c <fputc>
    1fc8:	ea 94       	dec	r14
    1fca:	ee 20       	and	r14, r14
    1fcc:	c1 f7       	brne	.-16     	; 0x1fbe <vfprintf+0x398>
    1fce:	43 ce       	rjmp	.-890    	; 0x1c56 <vfprintf+0x30>
    1fd0:	f3 01       	movw	r30, r6
    1fd2:	66 81       	ldd	r22, Z+6	; 0x06
    1fd4:	77 81       	ldd	r23, Z+7	; 0x07
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	2b 96       	adiw	r28, 0x0b	; 11
    1fda:	e2 e1       	ldi	r30, 0x12	; 18
    1fdc:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__epilogue_restores__>

00001fe0 <strnlen_P>:
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	05 90       	lpm	r0, Z+
    1fe4:	61 50       	subi	r22, 0x01	; 1
    1fe6:	70 40       	sbci	r23, 0x00	; 0
    1fe8:	01 10       	cpse	r0, r1
    1fea:	d8 f7       	brcc	.-10     	; 0x1fe2 <strnlen_P+0x2>
    1fec:	80 95       	com	r24
    1fee:	90 95       	com	r25
    1ff0:	8e 0f       	add	r24, r30
    1ff2:	9f 1f       	adc	r25, r31
    1ff4:	08 95       	ret

00001ff6 <strnlen>:
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	61 50       	subi	r22, 0x01	; 1
    1ffa:	70 40       	sbci	r23, 0x00	; 0
    1ffc:	01 90       	ld	r0, Z+
    1ffe:	01 10       	cpse	r0, r1
    2000:	d8 f7       	brcc	.-10     	; 0x1ff8 <strnlen+0x2>
    2002:	80 95       	com	r24
    2004:	90 95       	com	r25
    2006:	8e 0f       	add	r24, r30
    2008:	9f 1f       	adc	r25, r31
    200a:	08 95       	ret

0000200c <strrev>:
    200c:	dc 01       	movw	r26, r24
    200e:	fc 01       	movw	r30, r24
    2010:	67 2f       	mov	r22, r23
    2012:	71 91       	ld	r23, Z+
    2014:	77 23       	and	r23, r23
    2016:	e1 f7       	brne	.-8      	; 0x2010 <strrev+0x4>
    2018:	32 97       	sbiw	r30, 0x02	; 2
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <strrev+0x18>
    201c:	7c 91       	ld	r23, X
    201e:	6d 93       	st	X+, r22
    2020:	70 83       	st	Z, r23
    2022:	62 91       	ld	r22, -Z
    2024:	ae 17       	cp	r26, r30
    2026:	bf 07       	cpc	r27, r31
    2028:	c8 f3       	brcs	.-14     	; 0x201c <strrev+0x10>
    202a:	08 95       	ret

0000202c <fputc>:
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	8c 01       	movw	r16, r24
    2036:	eb 01       	movw	r28, r22
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	81 ff       	sbrs	r24, 1
    203c:	1b c0       	rjmp	.+54     	; 0x2074 <fputc+0x48>
    203e:	82 ff       	sbrs	r24, 2
    2040:	0d c0       	rjmp	.+26     	; 0x205c <fputc+0x30>
    2042:	2e 81       	ldd	r18, Y+6	; 0x06
    2044:	3f 81       	ldd	r19, Y+7	; 0x07
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	9d 81       	ldd	r25, Y+5	; 0x05
    204a:	28 17       	cp	r18, r24
    204c:	39 07       	cpc	r19, r25
    204e:	64 f4       	brge	.+24     	; 0x2068 <fputc+0x3c>
    2050:	e8 81       	ld	r30, Y
    2052:	f9 81       	ldd	r31, Y+1	; 0x01
    2054:	01 93       	st	Z+, r16
    2056:	f9 83       	std	Y+1, r31	; 0x01
    2058:	e8 83       	st	Y, r30
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <fputc+0x3c>
    205c:	e8 85       	ldd	r30, Y+8	; 0x08
    205e:	f9 85       	ldd	r31, Y+9	; 0x09
    2060:	80 2f       	mov	r24, r16
    2062:	09 95       	icall
    2064:	89 2b       	or	r24, r25
    2066:	31 f4       	brne	.+12     	; 0x2074 <fputc+0x48>
    2068:	8e 81       	ldd	r24, Y+6	; 0x06
    206a:	9f 81       	ldd	r25, Y+7	; 0x07
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	9f 83       	std	Y+7, r25	; 0x07
    2070:	8e 83       	std	Y+6, r24	; 0x06
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <fputc+0x4c>
    2074:	0f ef       	ldi	r16, 0xFF	; 255
    2076:	1f ef       	ldi	r17, 0xFF	; 255
    2078:	c8 01       	movw	r24, r16
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	08 95       	ret

00002084 <__ultoa_invert>:
    2084:	fa 01       	movw	r30, r20
    2086:	aa 27       	eor	r26, r26
    2088:	28 30       	cpi	r18, 0x08	; 8
    208a:	51 f1       	breq	.+84     	; 0x20e0 <__ultoa_invert+0x5c>
    208c:	20 31       	cpi	r18, 0x10	; 16
    208e:	81 f1       	breq	.+96     	; 0x20f0 <__ultoa_invert+0x6c>
    2090:	e8 94       	clt
    2092:	6f 93       	push	r22
    2094:	6e 7f       	andi	r22, 0xFE	; 254
    2096:	6e 5f       	subi	r22, 0xFE	; 254
    2098:	7f 4f       	sbci	r23, 0xFF	; 255
    209a:	8f 4f       	sbci	r24, 0xFF	; 255
    209c:	9f 4f       	sbci	r25, 0xFF	; 255
    209e:	af 4f       	sbci	r26, 0xFF	; 255
    20a0:	b1 e0       	ldi	r27, 0x01	; 1
    20a2:	3e d0       	rcall	.+124    	; 0x2120 <__ultoa_invert+0x9c>
    20a4:	b4 e0       	ldi	r27, 0x04	; 4
    20a6:	3c d0       	rcall	.+120    	; 0x2120 <__ultoa_invert+0x9c>
    20a8:	67 0f       	add	r22, r23
    20aa:	78 1f       	adc	r23, r24
    20ac:	89 1f       	adc	r24, r25
    20ae:	9a 1f       	adc	r25, r26
    20b0:	a1 1d       	adc	r26, r1
    20b2:	68 0f       	add	r22, r24
    20b4:	79 1f       	adc	r23, r25
    20b6:	8a 1f       	adc	r24, r26
    20b8:	91 1d       	adc	r25, r1
    20ba:	a1 1d       	adc	r26, r1
    20bc:	6a 0f       	add	r22, r26
    20be:	71 1d       	adc	r23, r1
    20c0:	81 1d       	adc	r24, r1
    20c2:	91 1d       	adc	r25, r1
    20c4:	a1 1d       	adc	r26, r1
    20c6:	20 d0       	rcall	.+64     	; 0x2108 <__ultoa_invert+0x84>
    20c8:	09 f4       	brne	.+2      	; 0x20cc <__ultoa_invert+0x48>
    20ca:	68 94       	set
    20cc:	3f 91       	pop	r19
    20ce:	2a e0       	ldi	r18, 0x0A	; 10
    20d0:	26 9f       	mul	r18, r22
    20d2:	11 24       	eor	r1, r1
    20d4:	30 19       	sub	r19, r0
    20d6:	30 5d       	subi	r19, 0xD0	; 208
    20d8:	31 93       	st	Z+, r19
    20da:	de f6       	brtc	.-74     	; 0x2092 <__ultoa_invert+0xe>
    20dc:	cf 01       	movw	r24, r30
    20de:	08 95       	ret
    20e0:	46 2f       	mov	r20, r22
    20e2:	47 70       	andi	r20, 0x07	; 7
    20e4:	40 5d       	subi	r20, 0xD0	; 208
    20e6:	41 93       	st	Z+, r20
    20e8:	b3 e0       	ldi	r27, 0x03	; 3
    20ea:	0f d0       	rcall	.+30     	; 0x210a <__ultoa_invert+0x86>
    20ec:	c9 f7       	brne	.-14     	; 0x20e0 <__ultoa_invert+0x5c>
    20ee:	f6 cf       	rjmp	.-20     	; 0x20dc <__ultoa_invert+0x58>
    20f0:	46 2f       	mov	r20, r22
    20f2:	4f 70       	andi	r20, 0x0F	; 15
    20f4:	40 5d       	subi	r20, 0xD0	; 208
    20f6:	4a 33       	cpi	r20, 0x3A	; 58
    20f8:	18 f0       	brcs	.+6      	; 0x2100 <__ultoa_invert+0x7c>
    20fa:	49 5d       	subi	r20, 0xD9	; 217
    20fc:	31 fd       	sbrc	r19, 1
    20fe:	40 52       	subi	r20, 0x20	; 32
    2100:	41 93       	st	Z+, r20
    2102:	02 d0       	rcall	.+4      	; 0x2108 <__ultoa_invert+0x84>
    2104:	a9 f7       	brne	.-22     	; 0x20f0 <__ultoa_invert+0x6c>
    2106:	ea cf       	rjmp	.-44     	; 0x20dc <__ultoa_invert+0x58>
    2108:	b4 e0       	ldi	r27, 0x04	; 4
    210a:	a6 95       	lsr	r26
    210c:	97 95       	ror	r25
    210e:	87 95       	ror	r24
    2110:	77 95       	ror	r23
    2112:	67 95       	ror	r22
    2114:	ba 95       	dec	r27
    2116:	c9 f7       	brne	.-14     	; 0x210a <__ultoa_invert+0x86>
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	61 05       	cpc	r22, r1
    211c:	71 05       	cpc	r23, r1
    211e:	08 95       	ret
    2120:	9b 01       	movw	r18, r22
    2122:	ac 01       	movw	r20, r24
    2124:	0a 2e       	mov	r0, r26
    2126:	06 94       	lsr	r0
    2128:	57 95       	ror	r21
    212a:	47 95       	ror	r20
    212c:	37 95       	ror	r19
    212e:	27 95       	ror	r18
    2130:	ba 95       	dec	r27
    2132:	c9 f7       	brne	.-14     	; 0x2126 <__ultoa_invert+0xa2>
    2134:	62 0f       	add	r22, r18
    2136:	73 1f       	adc	r23, r19
    2138:	84 1f       	adc	r24, r20
    213a:	95 1f       	adc	r25, r21
    213c:	a0 1d       	adc	r26, r0
    213e:	08 95       	ret

00002140 <__udivmodhi4>:
    2140:	aa 1b       	sub	r26, r26
    2142:	bb 1b       	sub	r27, r27
    2144:	51 e1       	ldi	r21, 0x11	; 17
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <__udivmodhi4_ep>

00002148 <__udivmodhi4_loop>:
    2148:	aa 1f       	adc	r26, r26
    214a:	bb 1f       	adc	r27, r27
    214c:	a6 17       	cp	r26, r22
    214e:	b7 07       	cpc	r27, r23
    2150:	10 f0       	brcs	.+4      	; 0x2156 <__udivmodhi4_ep>
    2152:	a6 1b       	sub	r26, r22
    2154:	b7 0b       	sbc	r27, r23

00002156 <__udivmodhi4_ep>:
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	5a 95       	dec	r21
    215c:	a9 f7       	brne	.-22     	; 0x2148 <__udivmodhi4_loop>
    215e:	80 95       	com	r24
    2160:	90 95       	com	r25
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	08 95       	ret

00002168 <_exit>:
    2168:	f8 94       	cli

0000216a <__stop_program>:
    216a:	ff cf       	rjmp	.-2      	; 0x216a <__stop_program>
